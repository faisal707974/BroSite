{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\crrp.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react'; // import {Box} from 'react-bootstrap';\n\nimport { Modal } from 'react-bootstrap';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'; // import { Input } from 'react-bootstrap';\n// import Button from 'react-bootstrap';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 700,\n  bgcolor: 'background.paper',\n  boxShadow: 30,\n  pt: 4,\n  px: 20,\n  pb: 3\n};\n\nfunction Crop(props) {\n  _s();\n\n  const {\n    result,\n    setResult\n  } = props;\n  const [src, selectFile] = useState(null);\n  const [image, setImage] = useState(\"\");\n  const [crop, setCrop] = useState({\n    aspect: 1 / 1\n  });\n\n  const handleFileChange = e => {\n    e.preventDefault();\n    selectFile(URL.createObjectURL(e.target.files[0]));\n  };\n\n  const [open, setOpen] = useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n    console.log();\n  };\n\n  const handleClose = () => {\n    selectFile(null);\n    setImage(\"\");\n    setCrop({\n      aspect: 1 / 1\n    });\n    setOpen(false);\n  };\n\n  function getCroppedImg() {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Image = canvas.toDataURL(\"image/jpeg\");\n    setResult(base64Image);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: handleOpen,\n        children: \"click here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        open: open,\n        onClose: handleClose,\n        \"aria-labelledby\": \"parent-modal-title\",\n        \"aria-describedby\": \"parent-modal-description\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            placeholder: \"image\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), result && result ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-12\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result,\n              alt: \"croped-version\",\n              className: \"image-fluid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 46\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: src && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-12\",\n              children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n                src: src,\n                onImageLoaded: setImage,\n                crop: crop,\n                onChange: setCrop\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-primary btn\",\n                onClick: getCroppedImg,\n                children: \"Crop Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleClose,\n            children: \"Close Child Modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Crop, \"0zWJ0+u/CPVUngQutRbrdyn0Vn8=\");\n\n_c = Crop;\nexport default Crop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/crrp.js"],"names":["React","useState","Modal","ReactCrop","style","position","top","left","transform","width","bgcolor","boxShadow","pt","px","pb","Crop","props","result","setResult","src","selectFile","image","setImage","crop","setCrop","aspect","handleFileChange","e","preventDefault","URL","createObjectURL","target","files","open","setOpen","handleOpen","console","log","handleClose","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","base64Image","toDataURL"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC,C,CACA;;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP,C,CACA;AACA;;;AAIA,MAAMC,KAAK,GAAG;AACVC,EAAAA,QAAQ,EAAE,UADA;AAEVC,EAAAA,GAAG,EAAE,KAFK;AAGVC,EAAAA,IAAI,EAAE,KAHI;AAIVC,EAAAA,SAAS,EAAE,uBAJD;AAKVC,EAAAA,KAAK,EAAE,GALG;AAMVC,EAAAA,OAAO,EAAE,kBANC;AAOVC,EAAAA,SAAS,EAAE,EAPD;AAQVC,EAAAA,EAAE,EAAE,CARM;AASVC,EAAAA,EAAE,EAAE,EATM;AAUVC,EAAAA,EAAE,EAAE;AAVM,CAAd;;AAeA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACjB,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBF,KAA9B;AAEA,QAAM,CAACG,GAAD,EAAMC,UAAN,IAAoBnB,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACoB,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAAC;AAAEwB,IAAAA,MAAM,EAAE,IAAI;AAAd,GAAD,CAAhC;;AAEA,QAAMC,gBAAgB,GAAGC,CAAC,IAAI;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAR,IAAAA,UAAU,CAACS,GAAG,CAACC,eAAJ,CAAoBH,CAAC,CAACI,MAAF,CAASC,KAAT,CAAe,CAAf,CAApB,CAAD,CAAV;AACH,GAHD;;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC,KAAD,CAAhC;;AACA,QAAMkC,UAAU,GAAG,MAAM;AACrBD,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR;AACH,GAHD;;AAIA,QAAMC,WAAW,GAAG,MAAM;AACtBlB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,IAAAA,OAAO,CAAC;AAAEC,MAAAA,MAAM,EAAE,IAAI;AAAd,KAAD,CAAP;AACAS,IAAAA,OAAO,CAAC,KAAD,CAAP;AACH,GALD;;AAOA,WAASK,aAAT,GAAyB;AACrB,UAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,UAAMC,MAAM,GAAGtB,KAAK,CAACuB,YAAN,GAAqBvB,KAAK,CAACZ,KAA1C;AACA,UAAMoC,MAAM,GAAGxB,KAAK,CAACyB,aAAN,GAAsBzB,KAAK,CAAC0B,MAA3C;AACAP,IAAAA,MAAM,CAAC/B,KAAP,GAAec,IAAI,CAACd,KAApB;AACA+B,IAAAA,MAAM,CAACO,MAAP,GAAgBxB,IAAI,CAACwB,MAArB;AACA,UAAMC,GAAG,GAAGR,MAAM,CAACS,UAAP,CAAkB,IAAlB,CAAZ,CANqB,CAQrB;;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AACAZ,IAAAA,MAAM,CAAC/B,KAAP,GAAec,IAAI,CAACd,KAAL,GAAayC,UAA5B;AACAV,IAAAA,MAAM,CAACO,MAAP,GAAgBxB,IAAI,CAACwB,MAAL,GAAcG,UAA9B;AACAF,IAAAA,GAAG,CAACK,YAAJ,CAAiBH,UAAjB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmCA,UAAnC,EAA+C,CAA/C,EAAkD,CAAlD;AACAF,IAAAA,GAAG,CAACM,qBAAJ,GAA4B,MAA5B;AAEAN,IAAAA,GAAG,CAACO,SAAJ,CACIlC,KADJ,EAEIE,IAAI,CAACiC,CAAL,GAASb,MAFb,EAGIpB,IAAI,CAACkC,CAAL,GAASZ,MAHb,EAIItB,IAAI,CAACd,KAAL,GAAakC,MAJjB,EAKIpB,IAAI,CAACwB,MAAL,GAAcF,MALlB,EAMI,CANJ,EAOI,CAPJ,EAQItB,IAAI,CAACd,KART,EASIc,IAAI,CAACwB,MATT;AAYA,UAAMW,WAAW,GAAGlB,MAAM,CAACmB,SAAP,CAAiB,YAAjB,CAApB;AACAzC,IAAAA,SAAS,CAACwC,WAAD,CAAT;AACH;;AAED,sBACI;AAAA,2BACI;AAAA,8BACI;AAAG,QAAA,OAAO,EAAEvB,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AACI,QAAA,IAAI,EAAEF,IADV;AAEI,QAAA,OAAO,EAAEK,WAFb;AAGI,2BAAgB,oBAHpB;AAII,4BAAiB,0BAJrB;AAAA,+BAMI;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,WAAW,EAAC,OAA/B;AAAuC,YAAA,QAAQ,EAAEZ;AAAjD;AAAA;AAAA;AAAA;AAAA,kBADJ,EAMKT,MAAM,IAAIA,MAAV,gBAAoB;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,mCACjB;AAAK,cAAA,GAAG,EAAEA,MAAV;AAAkB,cAAA,GAAG,EAAC,gBAAtB;AAAuC,cAAA,SAAS,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA;AADiB;AAAA;AAAA;AAAA;AAAA,kBAApB,gBAGI;AAAA,sBAAME,GAAG,iBACN;AAAK,cAAA,SAAS,EAAC,WAAf;AAAA,sCACI,QAAC,SAAD;AAAW,gBAAA,GAAG,EAAEA,GAAhB;AAAqB,gBAAA,aAAa,EAAEG,QAApC;AAA8C,gBAAA,IAAI,EAAEC,IAApD;AAA0D,gBAAA,QAAQ,EAAEC;AAApE;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAQ,gBAAA,SAAS,EAAC,iBAAlB;AAAoC,gBAAA,OAAO,EAAEe,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,kBATT,eAgBI;AAAQ,YAAA,OAAO,EAAED,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GAxFQvB,I;;KAAAA,I;AA0FT,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\r\n// import {Box} from 'react-bootstrap';\r\nimport { Modal } from 'react-bootstrap';\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n// import { Input } from 'react-bootstrap';\r\n// import Button from 'react-bootstrap';\r\n\r\n\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 700,\r\n    bgcolor: 'background.paper',\r\n    boxShadow: 30,\r\n    pt: 4,\r\n    px: 20,\r\n    pb: 3,\r\n};\r\n\r\n\r\n\r\nfunction Crop(props) {\r\n    const { result, setResult } = props;\r\n\r\n    const [src, selectFile] = useState(null);\r\n    const [image, setImage] = useState(\"\");\r\n    const [crop, setCrop] = useState({ aspect: 1 / 1 })\r\n\r\n    const handleFileChange = e => {\r\n        e.preventDefault();\r\n        selectFile(URL.createObjectURL(e.target.files[0]))\r\n    }\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n        console.log()\r\n    };\r\n    const handleClose = () => {\r\n        selectFile(null)\r\n        setImage(\"\")\r\n        setCrop({ aspect: 1 / 1 })\r\n        setOpen(false);\r\n    };\r\n\r\n    function getCroppedImg() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        // New lines to be added\r\n        const pixelRatio = window.devicePixelRatio;\r\n        canvas.width = crop.width * pixelRatio;\r\n        canvas.height = crop.height * pixelRatio;\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = \"high\";\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n        setResult(base64Image)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <p onClick={handleOpen}>click here</p>\r\n                <Modal\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"parent-modal-title\"\r\n                    aria-describedby=\"parent-modal-description\"\r\n                >\r\n                    <div>\r\n                        <input type='file' placeholder='image' onChange={handleFileChange} />\r\n\r\n\r\n\r\n\r\n                        {result && result ? (<div className=\"col-lg-12\">\r\n                            <img src={result} alt=\"croped-version\" className='image-fluid' />\r\n                        </div>) :\r\n                            (<div>{src &&\r\n                                <div className=\"col-lg-12\">\r\n                                    <ReactCrop src={src} onImageLoaded={setImage} crop={crop} onChange={setCrop} />\r\n                                    <button className=\"btn-primary btn\" onClick={getCroppedImg}>Crop Image</button>\r\n                                </div>\r\n                            }</div>)\r\n                        }\r\n                        <button onClick={handleClose}>Close Child Modal</button>\r\n                    </div>\r\n                </Modal>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Crop"]},"metadata":{},"sourceType":"module"}