{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { CloseButton, Modal } from 'react-bootstrap';\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'; // import { canvasPreview } from './canvasPreview'\n// import { useDebounceEffect } from './useDebounceEffect'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc,\n    setCropper\n  } = _ref;\n  const [modalShow, setModalShow] = useState(true);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(1 / 1);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [image, setImage] = useState(null);\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const {\n        width,\n        height\n      } = e.currentTarget; // setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\n  function getCroppedImage() {\n    const canvas = document.createElement('canvas');\n    const scaleX = image.naturalWidth;\n    const scaleY = image.naturalHeight;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext('2d');\n    ctx.drawImage(image, crop.x = scaleX, crop.y = scaleY, crop.width = scaleX, crp.height = scaleY, 0, 0, crop.width, crop.height);\n    canvas.toBlob(blob => {\n      setImgSrc(blob);\n    });\n  }\n\n  const toggleModal = () => {\n    setModalShow(!modalShow);\n    setCropper(false);\n  };\n\n  console.log('completedCrop');\n  console.log(completedCrop);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalShow,\n      onHide: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: (_, percentCrop) => setCrop(percentCrop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: aspect,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            alt: \"Crop me\",\n            src: imgSrc // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n            ,\n            onLoad: getCroppedImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: previewCanvasRef,\n            style: {\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"sRV96dqf7dWOoG2Z9c+9ddJbNOY=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["CloseButton","Modal","React","useState","useRef","ReactCrop","Cropper","imgSrc","setImgSrc","setCropper","modalShow","setModalShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","imgRef","previewCanvasRef","image","setImage","onImageLoad","e","width","height","currentTarget","getCroppedImage","canvas","document","createElement","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","drawImage","x","y","crp","toBlob","blob","toggleModal","console","log","Boolean","_","percentCrop","c","border","objectFit"],"mappings":"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","sourcesContent":["import { CloseButton, Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n// import { canvasPreview } from './canvasPreview'\r\n// import { useDebounceEffect } from './useDebounceEffect'\r\n\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc, setCropper }) {\r\n\r\n    const [modalShow, setModalShow] = useState(true)\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(1/1)\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n    const [image,setImage]  = useState(null)\r\n\r\n    \r\n\r\n    function onImageLoad(e) {\r\n        if (aspect) {\r\n            const { width, height } = e.currentTarget\r\n            // setCrop(centerAspectCrop(width, height, aspect))\r\n        }\r\n    }\r\n\r\n    function getCroppedImage() {\r\n        const canvas = document.createElement('canvas')\r\n        const scaleX = image.naturalWidth\r\n        const scaleY = image.naturalHeight\r\n        canvas.width = crop.width\r\n        canvas.height = crop.height\r\n        const ctx = canvas.getContext('2d')\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x = scaleX,\r\n            crop.y = scaleY,\r\n            crop.width = scaleX,\r\n            crp.height = scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        )\r\n\r\n        canvas.toBlob(blob => {\r\n            setImgSrc(blob)\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    const toggleModal = ()=>{\r\n        setModalShow(!modalShow)\r\n        setCropper(false)\r\n    }\r\n    console.log('completedCrop')\r\n    console.log(completedCrop)\r\n\r\n    return (\r\n        <>\r\n            {/* <div> */}\r\n                <Modal show={modalShow} onHide={toggleModal}>\r\n                    <Modal.Body>\r\n                        <CloseButton onClick={toggleModal}/> \r\n                        {Boolean(imgSrc) && (\r\n                            <ReactCrop\r\n                                crop={crop}\r\n                                onChange={(_, percentCrop) => setCrop(percentCrop)}\r\n                                onComplete={(c) => setCompletedCrop(c)}\r\n                                aspect={aspect}\r\n                            >\r\n                                <img\r\n                                    ref={imgRef}\r\n                                    alt=\"Crop me\"\r\n                                    src={imgSrc}\r\n                                    // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\r\n                                    onLoad={getCroppedImage}\r\n                                />\r\n                            </ReactCrop>\r\n                        )}\r\n                        <div>\r\n                            {Boolean(completedCrop) && (\r\n                                <canvas\r\n                                    ref={previewCanvasRef}\r\n                                    style={{\r\n                                        border: '1px solid black',\r\n                                        objectFit: 'contain',\r\n                                        width: completedCrop.width,\r\n                                        height: completedCrop.height,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n                </Modal>\r\n            {/* </div> */}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}