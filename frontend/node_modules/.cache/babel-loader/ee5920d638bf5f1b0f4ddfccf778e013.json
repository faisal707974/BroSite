{"ast":null,"code":"import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_RESET } from '../constants/loginConstant';\nimport axios from 'axios';\nexport const loginAction = (data, setErr, navigate) => async (dispatch, getstate) => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const response = await axios.post('http://localhost:3001/login', data);\n\n    if (response.data.code == 401) {\n      setErr(response.data.message);\n    } else if (response.data.code == 403) {\n      setErr(response.data.message);\n    } else if (response.data.code == 200) {\n      // localStorage.setItem()\n      switch (response.data.userInfo.role) {\n        case 'newRegistration':\n          navigate('/new_registration');\n\n        case 'fumigation':\n          navigate('/fumigation');\n\n        case 'fumigation':\n          navigate('/fumigation');\n      } // if(response.data.userInfo.role === 'newRegistration'){\n      //     console.log(2)\n      //     navigate('/new_registration')\n      // }else if(response.data.userInfo.role === 'fumigation'){\n      //     console.log(3)\n      //     navigate('/fumigation')\n      // }\n\n\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: response.data\n      });\n    }\n  } catch (error) {}\n};","map":{"version":3,"sources":["D:/Project 2/frontend/src/redux/actions/loginAction.js"],"names":["USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_RESET","axios","loginAction","data","setErr","navigate","dispatch","getstate","type","response","post","code","message","userInfo","role","payload","error"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,kBAA7B,EAAiDC,eAAjD,EAAkEC,gBAAlE,QAA0F,4BAA1F;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,MAAP,EAAeC,QAAf,KAA4B,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACjF,MAAI;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEX;AAAR,KAAD,CAAR;AACA,UAAMY,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,6BAAX,EAA0CP,IAA1C,CAAvB;;AACA,QAAIM,QAAQ,CAACN,IAAT,CAAcQ,IAAd,IAAsB,GAA1B,EAA+B;AAC3BP,MAAAA,MAAM,CAACK,QAAQ,CAACN,IAAT,CAAcS,OAAf,CAAN;AACH,KAFD,MAEO,IAAIH,QAAQ,CAACN,IAAT,CAAcQ,IAAd,IAAsB,GAA1B,EAA+B;AAClCP,MAAAA,MAAM,CAACK,QAAQ,CAACN,IAAT,CAAcS,OAAf,CAAN;AACH,KAFM,MAEA,IAAIH,QAAQ,CAACN,IAAT,CAAcQ,IAAd,IAAsB,GAA1B,EAA+B;AAClC;AAEA,cAAOF,QAAQ,CAACN,IAAT,CAAcU,QAAd,CAAuBC,IAA9B;AACI,aAAK,iBAAL;AAAwBT,UAAAA,QAAQ,CAAC,mBAAD,CAAR;;AACxB,aAAK,YAAL;AAAoBA,UAAAA,QAAQ,CAAC,aAAD,CAAR;;AACpB,aAAK,YAAL;AAAoBA,UAAAA,QAAQ,CAAC,aAAD,CAAR;AAHxB,OAHkC,CAQlC;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEV,kBAAR;AAA4BiB,QAAAA,OAAO,EAAEN,QAAQ,CAACN;AAA9C,OAAD,CAAR;AACH;AAGJ,GA1BD,CA0BE,OAAOa,KAAP,EAAc,CAEf;AACJ,CA9BM","sourcesContent":["import { USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_RESET } from '../constants/loginConstant'\r\nimport axios from 'axios'\r\n\r\nexport const loginAction = (data, setErr, navigate) => async (dispatch, getstate) => {\r\n    try {\r\n        dispatch({ type: USER_LOGIN_REQUEST })\r\n        const response = await axios.post('http://localhost:3001/login', data)\r\n        if (response.data.code == 401) {\r\n            setErr(response.data.message)\r\n        } else if (response.data.code == 403) {\r\n            setErr(response.data.message)\r\n        } else if (response.data.code == 200) {\r\n            // localStorage.setItem()\r\n\r\n            switch(response.data.userInfo.role){\r\n                case 'newRegistration': navigate('/new_registration')\r\n                case 'fumigation' : navigate('/fumigation')\r\n                case 'fumigation' : navigate('/fumigation')\r\n            }\r\n            // if(response.data.userInfo.role === 'newRegistration'){\r\n            //     console.log(2)\r\n            //     navigate('/new_registration')\r\n            // }else if(response.data.userInfo.role === 'fumigation'){\r\n            //     console.log(3)\r\n            //     navigate('/fumigation')\r\n            // }\r\n            dispatch({ type: USER_LOGIN_SUCCESS, payload: response.data })\r\n        }\r\n\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}