{"ast":null,"code":"import { PixelCrop } from 'react-image-crop';\nconst TO_RADIANS = Math.PI / 180;\nexport async function //   image: HTMLImageElement,\n  //   canvas: HTMLCanvasElement,\n  //   crop: PixelCrop,\n  //   scale = 1,\n  //   rotate = 0,\ncanvasPreview() {\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height; // devicePixelRatio slightly increases sharpness on retina devices\n  // at the expense of slightly slower render times and needing to\n  // size the image back down if you want to download/upload and be\n  // true to the images natural size.\n\n  const pixelRatio = window.devicePixelRatio; // const pixelRatio = 1\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY;\n  const rotateRads = rotate * TO_RADIANS;\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save(); // 5) Move the crop origin to the canvas origin (0,0)\n\n  ctx.translate(-cropX, -cropY); // 4) Move the origin to the center of the original position\n\n  ctx.translate(centerX, centerY); // 3) Rotate around the origin\n\n  ctx.rotate(rotateRads); // 2) Scale the image\n\n  ctx.scale(scale, scale); // 1) Move the center of the image to the origin (0,0)\n\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/canvasPreview.js"],"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","ctx","canvas","getContext","Error","scaleX","image","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","crop","scale","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","rotate","centerX","centerY","save","translate","drawImage","restore"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA7B;AAEA,OAAO,eACP;AACA;AACA;AACA;AACA;AALsBC,aAAf,GAML;AACA,QAAMC,GAAG,GAAGC,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAZ;;AAEA,MAAI,CAACF,GAAL,EAAU;AACR,UAAM,IAAIG,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGC,KAAK,CAACC,YAAN,GAAqBD,KAAK,CAACE,KAA1C;AACA,QAAMC,MAAM,GAAGH,KAAK,CAACI,aAAN,GAAsBJ,KAAK,CAACK,MAA3C,CARA,CASA;AACA;AACA;AACA;;AACA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B,CAbA,CAcA;;AAEAZ,EAAAA,MAAM,CAACM,KAAP,GAAeV,IAAI,CAACiB,KAAL,CAAWC,IAAI,CAACR,KAAL,GAAaH,MAAb,GAAsBO,UAAjC,CAAf;AACAV,EAAAA,MAAM,CAACS,MAAP,GAAgBb,IAAI,CAACiB,KAAL,CAAWC,IAAI,CAACL,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAX,EAAAA,GAAG,CAACgB,KAAJ,CAAUL,UAAV,EAAsBA,UAAtB;AACAX,EAAAA,GAAG,CAACiB,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,KAAK,GAAGH,IAAI,CAACI,CAAL,GAASf,MAAvB;AACA,QAAMgB,KAAK,GAAGL,IAAI,CAACM,CAAL,GAASb,MAAvB;AAEA,QAAMc,UAAU,GAAGC,MAAM,GAAG3B,UAA5B;AACA,QAAM4B,OAAO,GAAGnB,KAAK,CAACC,YAAN,GAAqB,CAArC;AACA,QAAMmB,OAAO,GAAGpB,KAAK,CAACI,aAAN,GAAsB,CAAtC;AAEAT,EAAAA,GAAG,CAAC0B,IAAJ,GA7BA,CA+BA;;AACA1B,EAAAA,GAAG,CAAC2B,SAAJ,CAAc,CAACT,KAAf,EAAsB,CAACE,KAAvB,EAhCA,CAiCA;;AACApB,EAAAA,GAAG,CAAC2B,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB,EAlCA,CAmCA;;AACAzB,EAAAA,GAAG,CAACuB,MAAJ,CAAWD,UAAX,EApCA,CAqCA;;AACAtB,EAAAA,GAAG,CAACgB,KAAJ,CAAUA,KAAV,EAAiBA,KAAjB,EAtCA,CAuCA;;AACAhB,EAAAA,GAAG,CAAC2B,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AACAzB,EAAAA,GAAG,CAAC4B,SAAJ,CACEvB,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACC,YAJR,EAKED,KAAK,CAACI,aALR,EAME,CANF,EAOE,CAPF,EAQEJ,KAAK,CAACC,YARR,EASED,KAAK,CAACI,aATR;AAYAT,EAAAA,GAAG,CAAC6B,OAAJ;AACD","sourcesContent":["import { PixelCrop } from 'react-image-crop'\r\n\r\nconst TO_RADIANS = Math.PI / 180\r\n\r\nexport async function canvasPreview(\r\n//   image: HTMLImageElement,\r\n//   canvas: HTMLCanvasElement,\r\n//   crop: PixelCrop,\r\n//   scale = 1,\r\n//   rotate = 0,\r\n) {\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    throw new Error('No 2d context')\r\n  }\r\n\r\n  const scaleX = image.naturalWidth / image.width\r\n  const scaleY = image.naturalHeight / image.height\r\n  // devicePixelRatio slightly increases sharpness on retina devices\r\n  // at the expense of slightly slower render times and needing to\r\n  // size the image back down if you want to download/upload and be\r\n  // true to the images natural size.\r\n  const pixelRatio = window.devicePixelRatio\r\n  // const pixelRatio = 1\r\n\r\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\r\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\r\n\r\n  ctx.scale(pixelRatio, pixelRatio)\r\n  ctx.imageSmoothingQuality = 'high'\r\n\r\n  const cropX = crop.x * scaleX\r\n  const cropY = crop.y * scaleY\r\n\r\n  const rotateRads = rotate * TO_RADIANS\r\n  const centerX = image.naturalWidth / 2\r\n  const centerY = image.naturalHeight / 2\r\n\r\n  ctx.save()\r\n\r\n  // 5) Move the crop origin to the canvas origin (0,0)\r\n  ctx.translate(-cropX, -cropY)\r\n  // 4) Move the origin to the center of the original position\r\n  ctx.translate(centerX, centerY)\r\n  // 3) Rotate around the origin\r\n  ctx.rotate(rotateRads)\r\n  // 2) Scale the image\r\n  ctx.scale(scale, scale)\r\n  // 1) Move the center of the image to the origin (0,0)\r\n  ctx.translate(-centerX, -centerY)\r\n  ctx.drawImage(\r\n    image,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n  )\r\n\r\n  ctx.restore()\r\n}\r\n"]},"metadata":{},"sourceType":"module"}