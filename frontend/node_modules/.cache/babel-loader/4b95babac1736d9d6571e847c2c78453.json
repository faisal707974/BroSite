{"ast":null,"code":"import { PixelCrop } from 'react-image-crop';\nconst TO_RADIANS = Math.PI / 180;\nexport async function canvasPreview() {\n  let image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : HTMLImageElement;\n  let canvas = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HTMLCanvasElement;\n  let crop = arguments.length > 2 ? arguments[2] : undefined;\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY; // const rotateRads = rotate * TO_RADIANS\n\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save();\n  ctx.translate(-cropX, -cropY);\n  ctx.translate(centerX, centerY); // ctx.rotate(rotateRads)\n  // ctx.scale(scale, scale)\n\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\n  return base64Image;\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/canvasPreview.js"],"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","image","HTMLImageElement","canvas","HTMLCanvasElement","crop","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","scale","imageSmoothingQuality","cropX","x","cropY","y","centerX","centerY","save","translate","drawImage","restore","base64Image","toDataURL"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA7B;AAEA,OAAO,eAAeC,aAAf,GAML;AAAA,MALAC,KAKA,uEALQC,gBAKR;AAAA,MAJAC,MAIA,uEAJSC,iBAIT;AAAA,MAHAC,IAGA;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;;AAEA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGR,KAAK,CAACS,YAAN,GAAqBT,KAAK,CAACU,KAA1C;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACY,aAAN,GAAsBZ,KAAK,CAACa,MAA3C;AAEA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AAEAd,EAAAA,MAAM,CAACQ,KAAP,GAAeb,IAAI,CAACoB,KAAL,CAAWb,IAAI,CAACM,KAAL,GAAaF,MAAb,GAAsBM,UAAjC,CAAf;AACAZ,EAAAA,MAAM,CAACW,MAAP,GAAgBhB,IAAI,CAACoB,KAAL,CAAWb,IAAI,CAACS,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAT,EAAAA,GAAG,CAACa,KAAJ,CAAUJ,UAAV,EAAsBA,UAAtB;AACAT,EAAAA,GAAG,CAACc,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,KAAK,GAAGhB,IAAI,CAACiB,CAAL,GAASb,MAAvB;AACA,QAAMc,KAAK,GAAGlB,IAAI,CAACmB,CAAL,GAASZ,MAAvB,CAnBA,CAqBA;;AACA,QAAMa,OAAO,GAAGxB,KAAK,CAACS,YAAN,GAAqB,CAArC;AACA,QAAMgB,OAAO,GAAGzB,KAAK,CAACY,aAAN,GAAsB,CAAtC;AAEAP,EAAAA,GAAG,CAACqB,IAAJ;AAEArB,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACP,KAAf,EAAsB,CAACE,KAAvB;AACAjB,EAAAA,GAAG,CAACsB,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB,EA5BA,CA6BA;AACA;;AACApB,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AAEApB,EAAAA,GAAG,CAACuB,SAAJ,CACE5B,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACS,YAJR,EAKET,KAAK,CAACY,aALR,EAME,CANF,EAOE,CAPF,EAQEZ,KAAK,CAACS,YARR,EASET,KAAK,CAACY,aATR;AAYAP,EAAAA,GAAG,CAACwB,OAAJ;AAEA,QAAMC,WAAW,GAAG5B,MAAM,CAAC6B,SAAP,CAAiB,YAAjB,CAApB;AACA,SAAOD,WAAP;AAED","sourcesContent":["import { PixelCrop } from 'react-image-crop'\r\n\r\nconst TO_RADIANS = Math.PI / 180\r\n\r\nexport async function canvasPreview(\r\n  image = HTMLImageElement,\r\n  canvas=  HTMLCanvasElement,\r\n  crop: PixelCrop\r\n  // scale = 1,\r\n  // rotate = 0,\r\n) {\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    throw new Error('No 2d context')\r\n  }\r\n\r\n  const scaleX = image.naturalWidth / image.width\r\n  const scaleY = image.naturalHeight / image.height\r\n\r\n  const pixelRatio = window.devicePixelRatio\r\n\r\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\r\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\r\n\r\n  ctx.scale(pixelRatio, pixelRatio)\r\n  ctx.imageSmoothingQuality = 'high'\r\n\r\n  const cropX = crop.x * scaleX\r\n  const cropY = crop.y * scaleY\r\n\r\n  // const rotateRads = rotate * TO_RADIANS\r\n  const centerX = image.naturalWidth / 2\r\n  const centerY = image.naturalHeight / 2\r\n\r\n  ctx.save()\r\n\r\n  ctx.translate(-cropX, -cropY)\r\n  ctx.translate(centerX, centerY)\r\n  // ctx.rotate(rotateRads)\r\n  // ctx.scale(scale, scale)\r\n  ctx.translate(-centerX, -centerY)\r\n\r\n  ctx.drawImage(\r\n    image,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n  )\r\n\r\n  ctx.restore()\r\n\r\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n  return base64Image\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}