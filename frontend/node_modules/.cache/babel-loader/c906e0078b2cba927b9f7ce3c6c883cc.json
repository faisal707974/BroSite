{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Register\\\\RegistrationInput\\\\RegistrationInput.jsx\";\nimport React, { useState } from \"react\";\nimport { Form, Alert } from \"react-bootstrap\";\nimport '../RegistrationInput/RegistrationInput.css';\nimport { useForm } from 'react-hook-form';\nimport { ErrorMessage } from \"@hookform/error-message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (_ref) {\n  let {\n    type,\n    name,\n    register,\n    message,\n    errors,\n    label,\n    rules\n  } = _ref;\n  // const { register, handleSubmit, formState: { errors } } = useForm({ criteriaMode: \"all\" });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-input\",\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"form-floating\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          type: type,\n          name: name,\n          id: name,\n          placeholder: name,\n          ...register(label, { ...rules\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), errors[label] && errors[label].type === 'required' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-3 text-red-500 text-left\",\n          children: [name, \" is required\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 76\n        }, this), errors[label] && errors[label].type === 'maxLength' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-3 text-red-500 text-left\",\n          children: [name, \" should be have maximum of \", rules.maxLength, \" characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 77\n        }, this), errors[label] && errors[label].type === 'min' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-3 text-red-500 text-left\",\n          children: [name, \" should be contain atleast \", rules.min, \" characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 71\n        }, this), errors[label] && errors[label].type === 'pattern' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mb-3 text-red-500 text-left\",\n          children: [name, \" is invalid\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          htmlFor: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Register/RegistrationInput/RegistrationInput.jsx"],"names":["React","useState","Form","Alert","useForm","ErrorMessage","type","name","register","message","errors","label","rules","maxLength","min"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,iBAA5B;AACA,OAAO,4CAAP;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,YAAT,QAA6B,yBAA7B;;;AAEA,eAAe,gBAAmE;AAAA,MAAzD;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA,MAAjC;AAAyCC,IAAAA,KAAzC;AAAgDC,IAAAA;AAAhD,GAAyD;AAC9E;AACA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,eAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,IAAI,EAAEN,IAApB;AAA0B,UAAA,IAAI,EAAEC,IAAhC;AAAsC,UAAA,EAAE,EAAEA,IAA1C;AAAgD,UAAA,WAAW,EAAEA,IAA7D;AAAA,aAAuEC,QAAQ,CAACG,KAAD,EAAQ,EAAE,GAAGC;AAAL,WAAR;AAA/E;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKF,MAAM,CAACC,KAAD,CAAN,IAAiBD,MAAM,CAACC,KAAD,CAAN,CAAcL,IAAd,KAAuB,UAAxC,iBAAsD;AAAG,UAAA,SAAS,EAAC,6BAAb;AAAA,qBAA4CC,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF3D,EAGKG,MAAM,CAACC,KAAD,CAAN,IAAiBD,MAAM,CAACC,KAAD,CAAN,CAAcL,IAAd,KAAuB,WAAxC,iBAAuD;AAAG,UAAA,SAAS,EAAC,6BAAb;AAAA,qBAA4CC,IAA5C,iCAA6EK,KAAK,CAACC,SAAnF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH5D,EAIKH,MAAM,CAACC,KAAD,CAAN,IAAiBD,MAAM,CAACC,KAAD,CAAN,CAAcL,IAAd,KAAuB,KAAxC,iBAAiD;AAAG,UAAA,SAAS,EAAC,6BAAb;AAAA,qBAA4CC,IAA5C,iCAA6EK,KAAK,CAACE,GAAnF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJtD,EAKKJ,MAAM,CAACC,KAAD,CAAN,IAAiBD,MAAM,CAACC,KAAD,CAAN,CAAcL,IAAd,KAAuB,SAAxC,iBAAqD;AAAG,UAAA,SAAS,EAAC,6BAAb;AAAA,qBAA4CC,IAA5C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAL1D,eAMI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,OAAO,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAcH","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Alert } from \"react-bootstrap\";\r\nimport '../RegistrationInput/RegistrationInput.css'\r\nimport { useForm } from 'react-hook-form';\r\nimport { ErrorMessage } from \"@hookform/error-message\";\r\n\r\nexport default function ({ type, name, register, message, errors, label, rules }) {\r\n    // const { register, handleSubmit, formState: { errors } } = useForm({ criteriaMode: \"all\" });\r\n    return (\r\n        <>\r\n            <div className=\"custom-input\">\r\n                <Form.Group className='form-floating'>\r\n                    <Form.Control type={type} name={name} id={name} placeholder={name} {...register(label, { ...rules })} />\r\n                    {errors[label] && errors[label].type === 'required' && <p className=\"mb-3 text-red-500 text-left\">{name} is required</p>}\r\n                    {errors[label] && errors[label].type === 'maxLength' && <p className=\"mb-3 text-red-500 text-left\">{name} should be have maximum of {rules.maxLength} characters</p>}\r\n                    {errors[label] && errors[label].type === 'min' && <p className=\"mb-3 text-red-500 text-left\">{name} should be contain atleast {rules.min} characters</p>}\r\n                    {errors[label] && errors[label].type === 'pattern' && <p className=\"mb-3 text-red-500 text-left\">{name} is invalid</p>}\r\n                    <Form.Label htmlFor={name}>{}</Form.Label>\r\n                </Form.Group>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}