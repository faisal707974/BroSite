{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc\n  } = _ref;\n  const [crop, setCrop] = usestate();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(16 / 9);\n  const imgRef = useRef(null);\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const {\n        width,\n        height\n      } = e.currentTarget;\n      setCrop(centerAspectCrop(width, height, aspect));\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        crop: crop,\n        onChange: (_, percentCrop) => setCrop(percentCrop),\n        onComplete: c => setCompletedCrop(c),\n        aspect: aspect,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: imgRef,\n          alt: \"Crop me\",\n          src: imgSrc,\n          style: {\n            transform: `scale(${scale}) rotate(${rotate}deg)`\n          },\n          onLoad: onImageLoad\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: previewCanvasRef,\n          style: {\n            border: '1px solid black',\n            objectFit: 'contain',\n            width: completedCrop.width,\n            height: completedCrop.height\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"voBhy1sUTEo2CJEUhSmkt1j6rnY=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["React","ReactCrop","Cropper","imgSrc","setImgSrc","crop","setCrop","usestate","completedCrop","setCompletedCrop","useState","aspect","setAspect","imgRef","useRef","onImageLoad","e","width","height","currentTarget","centerAspectCrop","Boolean","_","percentCrop","c","transform","scale","rotate","previewCanvasRef","border","objectFit"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;;;AAGA,eAAe,SAASC,OAAT,OAAwC;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAuB;AAEnD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBC,QAAQ,EAAhC;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCC,QAAQ,EAAlD;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBF,QAAQ,CAAC,KAAK,CAAN,CAApC;AACA,QAAMG,MAAM,GAAGC,MAAM,CAAC,IAAD,CAArB;;AAGA,WAASC,WAAT,CAAqBC,CAArB,EAAgE;AAC5D,QAAIL,MAAJ,EAAY;AACR,YAAM;AAAEM,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBF,CAAC,CAACG,aAA5B;AACAb,MAAAA,OAAO,CAACc,gBAAgB,CAACH,KAAD,EAAQC,MAAR,EAAgBP,MAAhB,CAAjB,CAAP;AACH;AACJ;;AAED,sBACI;AAAA,2BACI;AAAA,iBACKU,OAAO,CAAClB,MAAD,CAAP,iBACG,QAAC,SAAD;AACI,QAAA,IAAI,EAAEE,IADV;AAEI,QAAA,QAAQ,EAAE,CAACiB,CAAD,EAAIC,WAAJ,KAAoBjB,OAAO,CAACiB,WAAD,CAFzC;AAGI,QAAA,UAAU,EAAGC,CAAD,IAAOf,gBAAgB,CAACe,CAAD,CAHvC;AAII,QAAA,MAAM,EAAEb,MAJZ;AAAA,+BAMI;AACI,UAAA,GAAG,EAAEE,MADT;AAEI,UAAA,GAAG,EAAC,SAFR;AAGI,UAAA,GAAG,EAAEV,MAHT;AAII,UAAA,KAAK,EAAE;AAAEsB,YAAAA,SAAS,EAAG,SAAQC,KAAM,YAAWC,MAAO;AAA9C,WAJX;AAKI,UAAA,MAAM,EAAEZ;AALZ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,cAFR,eAiBI;AAAA,kBACKM,OAAO,CAACb,aAAD,CAAP,iBACG;AACI,UAAA,GAAG,EAAEoB,gBADT;AAEI,UAAA,KAAK,EAAE;AACHC,YAAAA,MAAM,EAAE,iBADL;AAEHC,YAAAA,SAAS,EAAE,SAFR;AAGHb,YAAAA,KAAK,EAAET,aAAa,CAACS,KAHlB;AAIHC,YAAAA,MAAM,EAAEV,aAAa,CAACU;AAJnB;AAFX;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAmCH;;GAlDuBhB,O;;KAAAA,O","sourcesContent":["import React from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc }) {\r\n\r\n    const [crop, setCrop] = usestate()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(16 / 9)\r\n    const imgRef = useRef(null)\r\n\r\n\r\n    function onImageLoad(e: React.SyntheticEvent<HTMLImageElement>) {\r\n        if (aspect) {\r\n            const { width, height } = e.currentTarget\r\n            setCrop(centerAspectCrop(width, height, aspect))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                {Boolean(imgSrc) && (\r\n                    <ReactCrop\r\n                        crop={crop}\r\n                        onChange={(_, percentCrop) => setCrop(percentCrop)}\r\n                        onComplete={(c) => setCompletedCrop(c)}\r\n                        aspect={aspect}\r\n                    >\r\n                        <img\r\n                            ref={imgRef}\r\n                            alt=\"Crop me\"\r\n                            src={imgSrc}\r\n                            style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\r\n                            onLoad={onImageLoad}\r\n                        />\r\n                    </ReactCrop>\r\n                )}\r\n                <div>\r\n                    {Boolean(completedCrop) && (\r\n                        <canvas\r\n                            ref={previewCanvasRef}\r\n                            style={{\r\n                                border: '1px solid black',\r\n                                objectFit: 'contain',\r\n                                width: completedCrop.width,\r\n                                height: completedCrop.height,\r\n                            }}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}