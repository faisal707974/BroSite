{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Register\\\\RegistrationInput\\\\RegistrationInput.jsx\";\nimport React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport '../RegistrationInput/RegistrationInput.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (_ref) {\n  let {\n    as,\n    type,\n    name,\n    label,\n    register,\n    errors,\n    rules,\n    required\n  } = _ref;\n  console.log(errors);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"custom-input\",\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"form-floating\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n          className: errors && error - s,\n          as: as,\n          type: type,\n          name: name,\n          id: name,\n          placeholder: name,\n          ...register(label, { ...rules\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 21\n        }, this), errors[label] && errors[label].type === 'required' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"validation-error\",\n          children: \"Required field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 76\n        }, this), errors[label] && errors[label].type === 'maxLength' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"validation-error\",\n          children: [name, \" should be have maximum of \", rules.maxLength, \" characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 77\n        }, this), errors[label] && errors[label].type === 'min' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"validation-error\",\n          children: [name, \" should be contain atleast \", rules.min, \" characters\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 71\n        }, this), errors[label] && errors[label].type === 'pattern' && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"validation-error\",\n          children: [name, \" is invalid\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 75\n        }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n          htmlFor: name,\n          children: [label, required && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"reqStar\",\n            children: \"\\xA0*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Register/RegistrationInput/RegistrationInput.jsx"],"names":["React","Form","as","type","name","label","register","errors","rules","required","console","log","error","s","maxLength","min"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAO,4CAAP;;;AAEA,eAAe,gBAAuE;AAAA,MAA7D;AAACC,IAAAA,EAAD;AAAKC,IAAAA,IAAL;AAAWC,IAAAA,IAAX;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA,MAAlC;AAA0CC,IAAAA,KAA1C;AAAiDC,IAAAA;AAAjD,GAA6D;AAClFC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,sBACI;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,eAAtB;AAAA,gCACI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,SAAS,EAAEA,MAAM,IAAIK,KAAK,GAACC,CAAzC;AAA4C,UAAA,EAAE,EAAEX,EAAhD;AAAoD,UAAA,IAAI,EAAEC,IAA1D;AAAgE,UAAA,IAAI,EAAEC,IAAtE;AAA4E,UAAA,EAAE,EAAEA,IAAhF;AAAsF,UAAA,WAAW,EAAEA,IAAnG;AAAA,aAA6GE,QAAQ,CAACD,KAAD,EAAQ,EAAE,GAAGG;AAAL,WAAR;AAArH;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKD,MAAM,CAACF,KAAD,CAAN,IAAiBE,MAAM,CAACF,KAAD,CAAN,CAAcF,IAAd,KAAuB,UAAxC,iBAAsD;AAAG,UAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF3D,EAGKI,MAAM,CAACF,KAAD,CAAN,IAAiBE,MAAM,CAACF,KAAD,CAAN,CAAcF,IAAd,KAAuB,WAAxC,iBAAuD;AAAG,UAAA,SAAS,EAAC,kBAAb;AAAA,qBAAiCC,IAAjC,iCAAkEI,KAAK,CAACM,SAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAH5D,EAIKP,MAAM,CAACF,KAAD,CAAN,IAAiBE,MAAM,CAACF,KAAD,CAAN,CAAcF,IAAd,KAAuB,KAAxC,iBAAiD;AAAG,UAAA,SAAS,EAAC,kBAAb;AAAA,qBAAiCC,IAAjC,iCAAkEI,KAAK,CAACO,GAAxE;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJtD,EAKKR,MAAM,CAACF,KAAD,CAAN,IAAiBE,MAAM,CAACF,KAAD,CAAN,CAAcF,IAAd,KAAuB,SAAxC,iBAAqD;AAAG,UAAA,SAAS,EAAC,kBAAb;AAAA,qBAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAL1D,eAMI,QAAC,IAAD,CAAM,KAAN;AAAY,UAAA,OAAO,EAAEA,IAArB;AAAA,qBAA4BC,KAA5B,EACCI,QAAQ,iBAAI;AAAM,YAAA,SAAS,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADb;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAgBH","sourcesContent":["import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport '../RegistrationInput/RegistrationInput.css'\r\n\r\nexport default function ({as, type, name, label, register, errors, rules, required }) {\r\n    console.log(errors)\r\n    return (\r\n        <>\r\n            <div className=\"custom-input\">\r\n                <Form.Group className='form-floating'>\r\n                    <Form.Control className={errors && error-s} as={as} type={type} name={name} id={name} placeholder={name} {...register(label, { ...rules })} />\r\n                    {errors[label] && errors[label].type === 'required' && <p className=\"validation-error\">Required field</p>}\r\n                    {errors[label] && errors[label].type === 'maxLength' && <p className=\"validation-error\">{name} should be have maximum of {rules.maxLength} characters</p>}\r\n                    {errors[label] && errors[label].type === 'min' && <p className=\"validation-error\">{name} should be contain atleast {rules.min} characters</p>}\r\n                    {errors[label] && errors[label].type === 'pattern' && <p className=\"validation-error\">{name} is invalid</p>}\r\n                    <Form.Label htmlFor={name}>{label}\r\n                    {required && <span className=\"reqStar\">&nbsp;*</span>}\r\n                    </Form.Label>\r\n                </Form.Group>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}