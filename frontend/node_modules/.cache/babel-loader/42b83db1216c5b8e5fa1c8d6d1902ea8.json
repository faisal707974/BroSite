{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { CloseButton, Modal } from 'react-bootstrap';\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'; // import { canvasPreview } from './canvasPreview'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc\n  } = _ref;\n  const [modalShow, setModalShow] = useState(true);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(1 / 1);\n  const [state, setState] = useState(null);\n  const [image, setImage] = useState(\"\");\n  const [result, setResult] = useState();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null); // if (\n  //     completedCrop?.width &&\n  //     completedCrop?.height &&\n  //     imgRef.current &&\n  //     previewCanvasRef.current\n  // ) {\n  //     canvasPreview(\n  //         imgRef.current,\n  //         previewCanvasRef.current,\n  //         completedCrop,\n  //         setState\n  //     )\n  // }\n\n  const toggleModal = () => {\n    setModalShow(!modalShow);\n  };\n\n  const saveCrop = () => {\n    console.log('ide save crop'); // console.log(state)\n    // setImgSrc =  state\n\n    console.log(crop);\n  };\n\n  function getCroppedImg() {\n    const canvas = document.createElement(\"canvas\");\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    canvas.width = crop.width;\n    canvas.height = crop.height;\n    const ctx = canvas.getContext(\"2d\"); // New lines to be added\n\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio;\n    canvas.height = crop.height * pixelRatio;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Image = canvas.toDataURL(\"image/jpeg\");\n    setResult(base64Image);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalShow,\n      onHide: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: (crop, percentCrop) => setCrop(crop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: aspect,\n          onImageLoaded: setImage,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            alt: \"Crop me\",\n            src: imgSrc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: previewCanvasRef,\n            style: {\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getCroppedImg,\n          children: \"Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"WJ1cAEdKz5v/MWjbmezomLS1sAQ=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["CloseButton","Modal","React","useState","useRef","ReactCrop","Cropper","imgSrc","setImgSrc","modalShow","setModalShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","state","setState","image","setImage","result","setResult","imgRef","previewCanvasRef","toggleModal","saveCrop","console","log","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","base64Image","toDataURL","Boolean","percentCrop","c","border","objectFit"],"mappings":"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","sourcesContent":["import { CloseButton, Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n// import { canvasPreview } from './canvasPreview'\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc }) {\r\n\r\n    const [modalShow, setModalShow] = useState(true)\r\n\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(1 / 1)\r\n    const [state, setState] = useState(null)\r\n\r\n    const [image, setImage] = useState(\"\");\r\n    const [result, setResult] = useState()\r\n\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n\r\n    // if (\r\n    //     completedCrop?.width &&\r\n    //     completedCrop?.height &&\r\n    //     imgRef.current &&\r\n    //     previewCanvasRef.current\r\n    // ) {\r\n    //     canvasPreview(\r\n    //         imgRef.current,\r\n    //         previewCanvasRef.current,\r\n    //         completedCrop,\r\n    //         setState\r\n    //     )\r\n    // }\r\n\r\n    const toggleModal = () => {\r\n        setModalShow(!modalShow)\r\n    }\r\n\r\n    const saveCrop = () => {\r\n        console.log('ide save crop')\r\n        // console.log(state)\r\n        // setImgSrc =  state\r\n        console.log(crop)\r\n    }\r\n\r\n\r\n\r\n\r\n    function getCroppedImg() {\r\n        const canvas = document.createElement(\"canvas\");\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        // New lines to be added\r\n        const pixelRatio = window.devicePixelRatio;\r\n        canvas.width = crop.width * pixelRatio;\r\n        canvas.height = crop.height * pixelRatio;\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = \"high\";\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height\r\n        );\r\n\r\n        const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n        setResult(base64Image)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modalShow} onHide={toggleModal}>\r\n                <Modal.Body>\r\n                    <CloseButton onClick={toggleModal} />\r\n                    {Boolean(imgSrc) && (\r\n                        <ReactCrop\r\n                            crop={crop}\r\n                            onChange={(crop, percentCrop) => setCrop(crop)}\r\n                            onComplete={(c) => setCompletedCrop(c)}\r\n                            aspect={aspect}\r\n                            onImageLoaded={setImage}\r\n                        >\r\n                            <img\r\n                                ref={imgRef}\r\n                                alt=\"Crop me\"\r\n                                src={imgSrc}\r\n                            />\r\n                        </ReactCrop>\r\n                    )}\r\n                    <div>\r\n                        {Boolean(completedCrop) && (\r\n                            <canvas\r\n                                ref={previewCanvasRef}\r\n                                style={{\r\n                                    border: '1px solid black',\r\n                                    objectFit: 'contain',\r\n                                    width: completedCrop.width,\r\n                                    height: completedCrop.height,\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                    <button onClick={getCroppedImg}>Crop</button>\r\n\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}