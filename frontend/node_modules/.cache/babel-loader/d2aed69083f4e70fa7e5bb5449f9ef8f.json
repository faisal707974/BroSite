{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { CloseButton, Modal } from 'react-bootstrap';\nimport React, { useState, useRef, useE } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css'; // import { canvasPreview } from './canvasPreview'\n// import { useDebounceEffect } from './useDebounceEffect'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc\n  } = _ref;\n  const [modalShow, setModalShow] = useState(true);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(1 / 1);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const {\n        width,\n        height\n      } = e.currentTarget; // setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgSrc.current) {\n      return;\n    }\n\n    const image = imgSrc.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    const pixelRatio = window.devicePixelRatio;\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n  }, [completedCrop]);\n\n  const toggleModal = () => {\n    setModalShow(!modalShow);\n  };\n\n  console.log('completedCrop');\n  console.log(completedCrop);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalShow,\n      onHide: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: (_, percentCrop) => setCrop(percentCrop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: aspect,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            alt: \"Crop me\",\n            src: imgSrc // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n            ,\n            onLoad: onImageLoad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: previewCanvasRef,\n            style: {\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"mHsVxZeKeJOq+cCd97H8Syu2DB8=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["CloseButton","Modal","React","useState","useRef","useE","ReactCrop","Cropper","imgSrc","setImgSrc","modalShow","setModalShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","imgRef","previewCanvasRef","onImageLoad","e","width","height","currentTarget","useEffect","current","image","canvas","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","imageSmoothingQuality","drawImage","x","y","toggleModal","console","log","Boolean","_","percentCrop","c","border","objectFit"],"mappings":"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","sourcesContent":["import { CloseButton, Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef, useE } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n// import { canvasPreview } from './canvasPreview'\r\n// import { useDebounceEffect } from './useDebounceEffect'\r\n\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc }) {\r\n\r\n    const [modalShow, setModalShow] = useState(true)\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(1 / 1)\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n\r\n\r\n\r\n    function onImageLoad(e) {\r\n        if (aspect) {\r\n            const { width, height } = e.currentTarget\r\n            // setCrop(centerAspectCrop(width, height, aspect))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!completedCrop || !previewCanvasRef.current || !imgSrc.current) {\r\n            return;\r\n        }\r\n        const image = imgSrc.current;\r\n        const canvas = previewCanvasRef.current;\r\n        const crop = completedCrop;\r\n\r\n        const scaleX = image.naturalWidth / image.width;\r\n        const scaleY = image.naturalHeight / image.height;\r\n        const ctx = canvas.getContext('2d');\r\n        const pixelRatio = window.devicePixelRatio;\r\n\r\n        canvas.width = crop.width * pixelRatio * scaleX;\r\n        canvas.height = crop.height * pixelRatio * scaleY;\r\n\r\n        ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n        ctx.imageSmoothingQuality = 'high';\r\n\r\n        ctx.drawImage(\r\n            image,\r\n            crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY\r\n        );\r\n    }, [completedCrop]);\r\n\r\n\r\n\r\n\r\n\r\n    const toggleModal = () => {\r\n        setModalShow(!modalShow)\r\n    }\r\n    console.log('completedCrop')\r\n    console.log(completedCrop)\r\n\r\n    return (\r\n        <>\r\n            {/* <div> */}\r\n            <Modal show={modalShow} onHide={toggleModal}>\r\n                <Modal.Body>\r\n                    <CloseButton onClick={toggleModal} />\r\n                    {Boolean(imgSrc) && (\r\n                        <ReactCrop\r\n                            crop={crop}\r\n                            onChange={(_, percentCrop) => setCrop(percentCrop)}\r\n                            onComplete={(c) => setCompletedCrop(c)}\r\n                            aspect={aspect}\r\n                        >\r\n                            <img\r\n                                ref={imgRef}\r\n                                alt=\"Crop me\"\r\n                                src={imgSrc}\r\n                                // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\r\n                                onLoad={onImageLoad}\r\n                            />\r\n                        </ReactCrop>\r\n                    )}\r\n                    <div>\r\n                        {Boolean(completedCrop) && (\r\n                            <canvas\r\n                                ref={previewCanvasRef}\r\n                                style={{\r\n                                    border: '1px solid black',\r\n                                    objectFit: 'contain',\r\n                                    width: completedCrop.width,\r\n                                    height: completedCrop.height,\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n\r\n                </Modal.Body>\r\n            </Modal>\r\n            {/* </div> */}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}