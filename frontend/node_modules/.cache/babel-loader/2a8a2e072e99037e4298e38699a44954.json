{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { CloseButton, Modal } from 'react-bootstrap';\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { canvasPreview } from './canvasPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc,\n    setResult\n  } = _ref;\n  const [modalShow, setModalShow] = useState(true);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(1 / 1);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n\n  if (completedCrop !== null && completedCrop !== void 0 && completedCrop.width && completedCrop !== null && completedCrop !== void 0 && completedCrop.height && imgRef.current && previewCanvasRef.current) {\n    canvasPreview(imgRef.current, previewCanvasRef.current, completedCrop).then(result => {\n      console.log({\n        result\n      });\n      setResult(result);\n    });\n  }\n\n  const toggleModal = () => {\n    setModalShow(!modalShow);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalShow,\n      onHide: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: (crop, percentCrop) => setCrop(crop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: aspect,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            alt: \"Crop me\",\n            src: imgSrc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: previewCanvasRef,\n            style: {\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"X2ZU3M+CJK9pc1jgGMgb5mXDwBE=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["CloseButton","Modal","React","useState","useRef","ReactCrop","canvasPreview","Cropper","imgSrc","setImgSrc","setResult","modalShow","setModalShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","imgRef","previewCanvasRef","width","height","current","then","result","console","log","toggleModal","Boolean","percentCrop","c","border","objectFit"],"mappings":";;;AAAA,SAASA,WAAT,EAAsBC,KAAtB,QAAmC,iBAAnC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;AAEA,eAAe,SAASC,OAAT,OAAkD;AAAA;;AAAA,MAAjC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,SAAV;AAAqBC,IAAAA;AAArB,GAAiC;AAE7D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;AAEA,QAAM,CAACU,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,EAAhC;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,EAAlD;AACA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,IAAI,CAAL,CAApC;AAEA,QAAMgB,MAAM,GAAGf,MAAM,CAAC,IAAD,CAArB;AACA,QAAMgB,gBAAgB,GAAGhB,MAAM,CAAC,IAAD,CAA/B;;AAEA,MACIW,aAAa,SAAb,IAAAA,aAAa,WAAb,IAAAA,aAAa,CAAEM,KAAf,IACAN,aADA,aACAA,aADA,eACAA,aAAa,CAAEO,MADf,IAEAH,MAAM,CAACI,OAFP,IAGAH,gBAAgB,CAACG,OAJrB,EAKE;AACEjB,IAAAA,aAAa,CACTa,MAAM,CAACI,OADE,EAETH,gBAAgB,CAACG,OAFR,EAGTR,aAHS,CAAb,CAIES,IAJF,CAIQC,MAAD,IAAY;AACfC,MAAAA,OAAO,CAACC,GAAR,CAAY;AAAEF,QAAAA;AAAF,OAAZ;AACAf,MAAAA,SAAS,CAACe,MAAD,CAAT;AACH,KAPD;AAQH;;AAED,QAAMG,WAAW,GAAG,MAAM;AACtBhB,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;;AAIA,sBACI;AAAA,2BACI,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEA,SAAb;AAAwB,MAAA,MAAM,EAAEiB,WAAhC;AAAA,6BACI,QAAC,KAAD,CAAO,IAAP;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,OAAO,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEKC,OAAO,CAACrB,MAAD,CAAP,iBACG,QAAC,SAAD;AACI,UAAA,IAAI,EAAEK,IADV;AAEI,UAAA,QAAQ,EAAE,CAACA,IAAD,EAAOiB,WAAP,KAAuBhB,OAAO,CAACD,IAAD,CAF5C;AAGI,UAAA,UAAU,EAAGkB,CAAD,IAAOf,gBAAgB,CAACe,CAAD,CAHvC;AAII,UAAA,MAAM,EAAEd,MAJZ;AAAA,iCAMI;AACI,YAAA,GAAG,EAAEE,MADT;AAEI,YAAA,GAAG,EAAC,SAFR;AAGI,YAAA,GAAG,EAAEX;AAHT;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,gBAHR,eAgBI;AAAA,oBACKqB,OAAO,CAACd,aAAD,CAAP,iBACG;AACI,YAAA,GAAG,EAAEK,gBADT;AAEI,YAAA,KAAK,EAAE;AACHY,cAAAA,MAAM,EAAE,iBADL;AAEHC,cAAAA,SAAS,EAAE,SAFR;AAGHZ,cAAAA,KAAK,EAAEN,aAAa,CAACM,KAHlB;AAIHC,cAAAA,MAAM,EAAEP,aAAa,CAACO;AAJnB;AAFX;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,gBAhBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAoCH;;GAnEuBf,O;;KAAAA,O","sourcesContent":["import { CloseButton, Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport { canvasPreview } from './canvasPreview'\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc, setResult}) {\r\n\r\n    const [modalShow, setModalShow] = useState(true)\r\n\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(1 / 1)\r\n\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n    \r\n    if (\r\n        completedCrop?.width &&\r\n        completedCrop?.height &&\r\n        imgRef.current &&\r\n        previewCanvasRef.current\r\n    ) {\r\n        canvasPreview(\r\n            imgRef.current,\r\n            previewCanvasRef.current,\r\n            completedCrop,\r\n        ).then((result) => {\r\n            console.log({ result })\r\n            setResult(result)\r\n        })\r\n    }\r\n\r\n    const toggleModal = () => {\r\n        setModalShow(!modalShow)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modalShow} onHide={toggleModal}>\r\n                <Modal.Body>\r\n                    <CloseButton onClick={toggleModal} />\r\n                    {Boolean(imgSrc) && (\r\n                        <ReactCrop\r\n                            crop={crop}\r\n                            onChange={(crop, percentCrop) => setCrop(crop)}\r\n                            onComplete={(c) => setCompletedCrop(c)}\r\n                            aspect={aspect}\r\n                        >\r\n                            <img\r\n                                ref={imgRef}\r\n                                alt=\"Crop me\"\r\n                                src={imgSrc}\r\n                            />\r\n                        </ReactCrop>\r\n                    )}\r\n                    <div>\r\n                        {Boolean(completedCrop) && (\r\n                            <canvas\r\n                                ref={previewCanvasRef}\r\n                                style={{\r\n                                    border: '1px solid black',\r\n                                    objectFit: 'contain',\r\n                                    width: completedCrop.width,\r\n                                    height: completedCrop.height,\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}