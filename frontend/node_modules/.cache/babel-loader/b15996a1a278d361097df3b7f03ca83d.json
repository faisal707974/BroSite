{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { CloseButton, Modal } from 'react-bootstrap';\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { canvasPreview } from './canvasPreview';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc\n  } = _ref;\n  const [modalShow, setModalShow] = useState(true);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(1 / 1);\n  const [state, setState] = useState(null);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const result = '';\n\n  if (completedCrop !== null && completedCrop !== void 0 && completedCrop.width && completedCrop !== null && completedCrop !== void 0 && completedCrop.height && imgRef.current && previewCanvasRef.current) {\n    const result = canvasPreview(imgRef.current, previewCanvasRef.current, completedCrop, setState);\n  }\n\n  console.log(result);\n\n  const toggleModal = () => {\n    setModalShow(!modalShow);\n  };\n\n  const saveCrop = () => {\n    console.log('ide save crop'); // console.log(state)\n    // setImgSrc =  state\n\n    console.log(crop);\n  }; // console.log(state)\n\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      show: modalShow,\n      onHide: toggleModal,\n      children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [/*#__PURE__*/_jsxDEV(CloseButton, {\n          onClick: toggleModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n          crop: crop,\n          onChange: (crop, percentCrop) => setCrop(crop),\n          onComplete: c => setCompletedCrop(c),\n          aspect: aspect,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            ref: imgRef,\n            alt: \"Crop me\",\n            src: imgSrc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: previewCanvasRef,\n            style: {\n              border: '1px solid black',\n              objectFit: 'contain',\n              width: completedCrop.width,\n              height: completedCrop.height\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: saveCrop,\n          children: \"Crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: state,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"7iVYdML7hNwIGbM30clbECGTmMA=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["CloseButton","Modal","React","useState","useRef","ReactCrop","canvasPreview","Cropper","imgSrc","setImgSrc","modalShow","setModalShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","state","setState","imgRef","previewCanvasRef","result","width","height","current","console","log","toggleModal","saveCrop","Boolean","percentCrop","c","border","objectFit"],"mappings":"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","sourcesContent":["import { CloseButton, Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport { canvasPreview } from './canvasPreview'\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc }) {\r\n\r\n    const [modalShow, setModalShow] = useState(true)\r\n\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(1 / 1)\r\n    const [state,setState]= useState(null)\r\n\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n    const result= ''\r\n    if (\r\n        completedCrop?.width &&\r\n        completedCrop?.height &&\r\n        imgRef.current &&\r\n        previewCanvasRef.current\r\n    ) {\r\n       const result =  canvasPreview(\r\n            imgRef.current,\r\n            previewCanvasRef.current,\r\n            completedCrop,\r\n            setState\r\n        )\r\n    }\r\n\r\n    console.log(result)\r\n\r\n    const toggleModal = () => {\r\n        setModalShow(!modalShow)\r\n    }\r\n\r\n    const saveCrop = () => {\r\n        console.log('ide save crop')\r\n        // console.log(state)\r\n        // setImgSrc =  state\r\n        console.log(crop)\r\n    }\r\n\r\n    // console.log(state)\r\n\r\n    return (\r\n        <>\r\n            <Modal show={modalShow} onHide={toggleModal}>\r\n                <Modal.Body>\r\n                    <CloseButton onClick={toggleModal} />\r\n                    {Boolean(imgSrc) && (\r\n                        <ReactCrop\r\n                            crop={crop}\r\n                            onChange={(crop, percentCrop) => setCrop(crop)}\r\n                            onComplete={(c) => setCompletedCrop(c)}\r\n                            aspect={aspect}\r\n                        >\r\n                            <img\r\n                                ref={imgRef}\r\n                                alt=\"Crop me\"\r\n                                src={imgSrc}\r\n                            />\r\n                        </ReactCrop>\r\n                    )}\r\n                    <div>\r\n                        {Boolean(completedCrop) && (\r\n                            <canvas\r\n                                ref={previewCanvasRef}\r\n                                style={{\r\n                                    border: '1px solid black',\r\n                                    objectFit: 'contain',\r\n                                    width: completedCrop.width,\r\n                                    height: completedCrop.height,\r\n                                }}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                    <button onClick={saveCrop}>Crop</button>\r\n\r\n                    <img src={state} alt=\"\" />\r\n\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}