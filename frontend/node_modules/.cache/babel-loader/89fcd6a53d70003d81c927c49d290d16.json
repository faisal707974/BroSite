{"ast":null,"code":"import { PixelCrop } from 'react-image-crop';\nconst TO_RADIANS = Math.PI / 180;\nexport async function canvasPreview(image, canvas, crop, setState) {\n  let scale = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  let rotate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY;\n  const rotateRads = rotate * TO_RADIANS;\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save();\n  ctx.translate(-cropX, -cropY);\n  ctx.translate(centerX, centerY);\n  ctx.rotate(rotateRads);\n  ctx.scale(scale, scale);\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\n  return base64Image;\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/canvasPreview.js"],"names":["PixelCrop","TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","setState","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore","base64Image","toDataURL"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;AAEA,MAAMC,UAAU,GAAGC,IAAI,CAACC,EAAL,GAAU,GAA7B;AAEA,OAAO,eAAeC,aAAf,CACLC,KADK,EAELC,MAFK,EAGLC,IAHK,EAILC,QAJK,EAOL;AAAA,MAFAC,KAEA,uEAFQ,CAER;AAAA,MADAC,MACA,uEADS,CACT;AACA,QAAMC,GAAG,GAAGL,MAAM,CAACM,UAAP,CAAkB,IAAlB,CAAZ;;AAEA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGT,KAAK,CAACU,YAAN,GAAqBV,KAAK,CAACW,KAA1C;AACA,QAAMC,MAAM,GAAGZ,KAAK,CAACa,aAAN,GAAsBb,KAAK,CAACc,MAA3C;AAEA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AAEAhB,EAAAA,MAAM,CAACU,KAAP,GAAed,IAAI,CAACqB,KAAL,CAAWhB,IAAI,CAACS,KAAL,GAAaF,MAAb,GAAsBM,UAAjC,CAAf;AACAd,EAAAA,MAAM,CAACa,MAAP,GAAgBjB,IAAI,CAACqB,KAAL,CAAWhB,IAAI,CAACY,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAT,EAAAA,GAAG,CAACF,KAAJ,CAAUW,UAAV,EAAsBA,UAAtB;AACAT,EAAAA,GAAG,CAACa,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,KAAK,GAAGlB,IAAI,CAACmB,CAAL,GAASZ,MAAvB;AACA,QAAMa,KAAK,GAAGpB,IAAI,CAACqB,CAAL,GAASX,MAAvB;AAEA,QAAMY,UAAU,GAAGnB,MAAM,GAAGT,UAA5B;AACA,QAAM6B,OAAO,GAAGzB,KAAK,CAACU,YAAN,GAAqB,CAArC;AACA,QAAMgB,OAAO,GAAG1B,KAAK,CAACa,aAAN,GAAsB,CAAtC;AAEAP,EAAAA,GAAG,CAACqB,IAAJ;AAGArB,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACR,KAAf,EAAsB,CAACE,KAAvB;AAEAhB,EAAAA,GAAG,CAACsB,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB;AACApB,EAAAA,GAAG,CAACD,MAAJ,CAAWmB,UAAX;AACAlB,EAAAA,GAAG,CAACF,KAAJ,CAAUA,KAAV,EAAiBA,KAAjB;AACAE,EAAAA,GAAG,CAACsB,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AACApB,EAAAA,GAAG,CAACuB,SAAJ,CACE7B,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACU,YAJR,EAKEV,KAAK,CAACa,aALR,EAME,CANF,EAOE,CAPF,EAQEb,KAAK,CAACU,YARR,EASEV,KAAK,CAACa,aATR;AAYAP,EAAAA,GAAG,CAACwB,OAAJ;AAEA,QAAMC,WAAW,GAAG9B,MAAM,CAAC+B,SAAP,CAAiB,YAAjB,CAApB;AACA,SAAOD,WAAP;AAED","sourcesContent":["import { PixelCrop } from 'react-image-crop'\r\n\r\nconst TO_RADIANS = Math.PI / 180\r\n\r\nexport async function canvasPreview(\r\n  image: HTMLImageElement,\r\n  canvas: HTMLCanvasElement,\r\n  crop: PixelCrop,\r\n  setState,\r\n  scale = 1,\r\n  rotate = 0,\r\n) {\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    throw new Error('No 2d context')\r\n  }\r\n\r\n  const scaleX = image.naturalWidth / image.width\r\n  const scaleY = image.naturalHeight / image.height\r\n\r\n  const pixelRatio = window.devicePixelRatio\r\n\r\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\r\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\r\n\r\n  ctx.scale(pixelRatio, pixelRatio)\r\n  ctx.imageSmoothingQuality = 'high'\r\n\r\n  const cropX = crop.x * scaleX\r\n  const cropY = crop.y * scaleY\r\n\r\n  const rotateRads = rotate * TO_RADIANS\r\n  const centerX = image.naturalWidth / 2\r\n  const centerY = image.naturalHeight / 2\r\n\r\n  ctx.save()\r\n\r\n\r\n  ctx.translate(-cropX, -cropY)\r\n\r\n  ctx.translate(centerX, centerY)\r\n  ctx.rotate(rotateRads)\r\n  ctx.scale(scale, scale)\r\n  ctx.translate(-centerX, -centerY)\r\n  ctx.drawImage(\r\n    image,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n  )\r\n\r\n  ctx.restore()\r\n\r\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n  return base64Image\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}