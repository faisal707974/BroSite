{"ast":null,"code":"import { PixelCrop } from 'react-image-crop'; // const TO_RADIANS = Math.PI / 180\n\nexport async function canvasPreview() {\n  let image = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Image();\n  let canvas = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : HTMLCanvasElement;\n  let crop = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PixelCrop;\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    throw new Error('No 2d context');\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  const pixelRatio = window.devicePixelRatio;\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = 'high';\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY; // const rotateRads = rotate * TO_RADIANS\n\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n  ctx.save();\n  ctx.translate(-cropX, -cropY);\n  ctx.translate(centerX, centerY); // ctx.rotate(rotateRads)\n  // ctx.scale(scale, scale)\n\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(image, 0, 0, image.naturalWidth, image.naturalHeight, 0, 0, image.naturalWidth, image.naturalHeight);\n  ctx.restore();\n  console.log(canvas);\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\n  return canvas;\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/canvasPreview.js"],"names":["PixelCrop","canvasPreview","image","Image","canvas","HTMLCanvasElement","crop","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","Math","floor","scale","imageSmoothingQuality","cropX","x","cropY","y","centerX","centerY","save","translate","drawImage","restore","console","log","base64Image","toDataURL"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B,C,CAEA;;AAEA,OAAO,eAAeC,aAAf,GAML;AAAA,MALAC,KAKA,uEALQ,IAAIC,KAAJ,EAKR;AAAA,MAJAC,MAIA,uEAJUC,iBAIV;AAAA,MAHAC,IAGA,uEAHON,SAGP;AACA,QAAMO,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ;;AAEA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAU,eAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGR,KAAK,CAACS,YAAN,GAAqBT,KAAK,CAACU,KAA1C;AACA,QAAMC,MAAM,GAAGX,KAAK,CAACY,aAAN,GAAsBZ,KAAK,CAACa,MAA3C;AAEA,QAAMC,UAAU,GAAGC,MAAM,CAACC,gBAA1B;AAEAd,EAAAA,MAAM,CAACQ,KAAP,GAAeO,IAAI,CAACC,KAAL,CAAWd,IAAI,CAACM,KAAL,GAAaF,MAAb,GAAsBM,UAAjC,CAAf;AACAZ,EAAAA,MAAM,CAACW,MAAP,GAAgBI,IAAI,CAACC,KAAL,CAAWd,IAAI,CAACS,MAAL,GAAcF,MAAd,GAAuBG,UAAlC,CAAhB;AAEAT,EAAAA,GAAG,CAACc,KAAJ,CAAUL,UAAV,EAAsBA,UAAtB;AACAT,EAAAA,GAAG,CAACe,qBAAJ,GAA4B,MAA5B;AAEA,QAAMC,KAAK,GAAGjB,IAAI,CAACkB,CAAL,GAASd,MAAvB;AACA,QAAMe,KAAK,GAAGnB,IAAI,CAACoB,CAAL,GAASb,MAAvB,CAnBA,CAqBA;;AACA,QAAMc,OAAO,GAAGzB,KAAK,CAACS,YAAN,GAAqB,CAArC;AACA,QAAMiB,OAAO,GAAG1B,KAAK,CAACY,aAAN,GAAsB,CAAtC;AAEAP,EAAAA,GAAG,CAACsB,IAAJ;AAEAtB,EAAAA,GAAG,CAACuB,SAAJ,CAAc,CAACP,KAAf,EAAsB,CAACE,KAAvB;AACAlB,EAAAA,GAAG,CAACuB,SAAJ,CAAcH,OAAd,EAAuBC,OAAvB,EA5BA,CA6BA;AACA;;AACArB,EAAAA,GAAG,CAACuB,SAAJ,CAAc,CAACH,OAAf,EAAwB,CAACC,OAAzB;AAEArB,EAAAA,GAAG,CAACwB,SAAJ,CACE7B,KADF,EAEE,CAFF,EAGE,CAHF,EAIEA,KAAK,CAACS,YAJR,EAKET,KAAK,CAACY,aALR,EAME,CANF,EAOE,CAPF,EAQEZ,KAAK,CAACS,YARR,EASET,KAAK,CAACY,aATR;AAYAP,EAAAA,GAAG,CAACyB,OAAJ;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY9B,MAAZ;AACA,QAAM+B,WAAW,GAAG/B,MAAM,CAACgC,SAAP,CAAiB,YAAjB,CAApB;AACA,SAAOhC,MAAP;AAED","sourcesContent":["import { PixelCrop } from 'react-image-crop'\r\n\r\n// const TO_RADIANS = Math.PI / 180\r\n\r\nexport async function canvasPreview(\r\n  image = new Image(),\r\n  canvas =  HTMLCanvasElement,\r\n  crop = PixelCrop\r\n  // scale = 1,\r\n  // rotate = 0,\r\n) {\r\n  const ctx = canvas.getContext('2d')\r\n\r\n  if (!ctx) {\r\n    throw new Error('No 2d context')\r\n  }\r\n\r\n  const scaleX = image.naturalWidth / image.width\r\n  const scaleY = image.naturalHeight / image.height\r\n\r\n  const pixelRatio = window.devicePixelRatio\r\n\r\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio)\r\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio)\r\n\r\n  ctx.scale(pixelRatio, pixelRatio)\r\n  ctx.imageSmoothingQuality = 'high'\r\n\r\n  const cropX = crop.x * scaleX\r\n  const cropY = crop.y * scaleY\r\n\r\n  // const rotateRads = rotate * TO_RADIANS\r\n  const centerX = image.naturalWidth / 2\r\n  const centerY = image.naturalHeight / 2\r\n\r\n  ctx.save()\r\n\r\n  ctx.translate(-cropX, -cropY)\r\n  ctx.translate(centerX, centerY)\r\n  // ctx.rotate(rotateRads)\r\n  // ctx.scale(scale, scale)\r\n  ctx.translate(-centerX, -centerY)\r\n\r\n  ctx.drawImage(\r\n    image,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n    0,\r\n    0,\r\n    image.naturalWidth,\r\n    image.naturalHeight,\r\n  )\r\n\r\n  ctx.restore()\r\n  \r\n  console.log(canvas)\r\n  const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n  return canvas\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}