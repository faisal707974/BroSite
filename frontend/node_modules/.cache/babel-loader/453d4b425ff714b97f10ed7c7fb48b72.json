{"ast":null,"code":"import axios from 'axios';\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/registerConstant\";\nexport const registeration = (data, toggleModal) => async (dispatch, getstate) => {\n  console.log({\n    data\n  });\n  dispatch({\n    type: USER_REGISTER_REQUEST\n  });\n\n  try {\n    const base64 = data.photo;\n    fetch(base64).then(res => {\n      res.blob();\n    }).then(blob => {\n      const fd = new FormData();\n      const file = new File([blob], data.Name + \".jpeg\", {\n        type: 'image/jpeg'\n      });\n      console.log(file);\n      fd.append('file', file);\n      fd.append('upload_preset', 'gchysefv');\n      fd.append(\"cloud_name\", \"dj4qzfqjg\");\n      fd.append('resource_type', 'auto');\n      const API_URL = 'https://api.cloudinary.com/v1_1/dj4qzfqjg/image/upload';\n      fetch(API_URL, {\n        method: 'POST',\n        body: fd\n      }).then(res => res.json()).then(res => {\n        console.log({\n          res\n        });\n        data.photo = res;\n      });\n    });\n  } catch (error) {}\n\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'applicatoin/json'\n      }\n    };\n    const {\n      response\n    } = await axios.post('http://localhost:3001/registration', data);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: response\n    });\n    toggleModal();\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response ? error.response : error.message\n    });\n  }\n};","map":{"version":3,"sources":["D:/Project 2/frontend/src/redux/actions/registerAction.js"],"names":["axios","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","registeration","data","toggleModal","dispatch","getstate","console","log","type","base64","photo","fetch","then","res","blob","fd","FormData","file","File","Name","append","API_URL","method","body","json","error","config","headers","response","post","payload","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,EAAoDC,qBAApD,QAAiF,+BAAjF;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAC9EC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEL,IAAAA;AAAF,GAAZ;AACAE,EAAAA,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAET;AAAR,GAAD,CAAR;;AACJ,MAAG;AAEC,UAAMU,MAAM,GAAGP,IAAI,CAACQ,KAApB;AACAC,IAAAA,KAAK,CAACF,MAAD,CAAL,CACKG,IADL,CACUC,GAAG,IAAI;AACTA,MAAAA,GAAG,CAACC,IAAJ;AACH,KAHL,EAIKF,IAJL,CAIUE,IAAI,IAAI;AACV,YAAMC,EAAE,GAAG,IAAIC,QAAJ,EAAX;AACA,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACJ,IAAD,CAAT,EAAiBZ,IAAI,CAACiB,IAAL,GAAY,OAA7B,EAAsC;AAAEX,QAAAA,IAAI,EAAE;AAAR,OAAtC,CAAb;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYU,IAAZ;AACAF,MAAAA,EAAE,CAACK,MAAH,CAAU,MAAV,EAAkBH,IAAlB;AACAF,MAAAA,EAAE,CAACK,MAAH,CAAU,eAAV,EAA2B,UAA3B;AACAL,MAAAA,EAAE,CAACK,MAAH,CAAU,YAAV,EAAwB,WAAxB;AACAL,MAAAA,EAAE,CAACK,MAAH,CAAU,eAAV,EAA2B,MAA3B;AACA,YAAMC,OAAO,GAAG,wDAAhB;AACAV,MAAAA,KAAK,CAACU,OAAD,EAAU;AAAEC,QAAAA,MAAM,EAAE,MAAV;AAAkBC,QAAAA,IAAI,EAAER;AAAxB,OAAV,CAAL,CACKH,IADL,CACUC,GAAG,IAAIA,GAAG,CAACW,IAAJ,EADjB,EAEKZ,IAFL,CAEUC,GAAG,IAAI;AACTP,QAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,UAAAA;AAAF,SAAZ;AACAX,QAAAA,IAAI,CAACQ,KAAL,GAAaG,GAAb;AACH,OALL;AAMC,KAnBT;AAoBK,GAvBT,CAuBS,OAAMY,KAAN,EAAY,CAEZ;;AAGL,MAAI;AACA,UAAMC,MAAM,GAAG;AAAEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAAX,KAAf;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAe,MAAM/B,KAAK,CAACgC,IAAN,CAAW,oCAAX,EAAiD3B,IAAjD,CAA3B;AAEAE,IAAAA,QAAQ,CAAC;AAAEI,MAAAA,IAAI,EAAER,qBAAR;AAA+B8B,MAAAA,OAAO,EAAEF;AAAxC,KAAD,CAAR;AACAzB,IAAAA,WAAW;AACd,GAND,CAME,OAAOsB,KAAP,EAAc;AACZrB,IAAAA,QAAQ,CAAC;AACLI,MAAAA,IAAI,EAAEV,kBADD;AACqBgC,MAAAA,OAAO,EAC7BL,KAAK,CAACG,QAAN,GAAiBH,KAAK,CAACG,QAAvB,GAAkCH,KAAK,CAACM;AAFvC,KAAD,CAAR;AAIH;AACJ,CA3CM","sourcesContent":["import axios from 'axios'\r\nimport { USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/registerConstant\"\r\n\r\nexport const registeration = (data, toggleModal) => async (dispatch, getstate) => {\r\n    console.log({ data })\r\n    dispatch({ type: USER_REGISTER_REQUEST })\r\ntry{\r\n\r\n    const base64 = data.photo\r\n    fetch(base64)\r\n        .then(res => {\r\n            res.blob()\r\n        })\r\n        .then(blob => {\r\n            const fd = new FormData();\r\n            const file = new File([blob], data.Name + \".jpeg\", { type: 'image/jpeg' });\r\n            console.log(file)\r\n            fd.append('file', file)\r\n            fd.append('upload_preset', 'gchysefv')\r\n            fd.append(\"cloud_name\", \"dj4qzfqjg\");\r\n            fd.append('resource_type', 'auto')\r\n            const API_URL = 'https://api.cloudinary.com/v1_1/dj4qzfqjg/image/upload'\r\n            fetch(API_URL, { method: 'POST', body: fd })\r\n                .then(res => res.json())\r\n                .then(res => {\r\n                    console.log({ res })\r\n                    data.photo = res\r\n                })\r\n            })\r\n        }catch(error){\r\n\r\n        }\r\n            \r\n\r\n    try {\r\n        const config = { headers: { 'Content-Type': 'applicatoin/json' } }\r\n        const { response } = await axios.post('http://localhost:3001/registration', data)\r\n\r\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: response })\r\n        toggleModal()\r\n    } catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL, payload:\r\n                error.response ? error.response : error.message\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}