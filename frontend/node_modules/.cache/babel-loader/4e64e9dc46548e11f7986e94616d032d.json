{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\crrp.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Form, Button, Container } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useState } from \"react\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport ReactCrop from \"react-image-crop\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Crrp() {\n  _s();\n\n  const [srcImg, setSrcImg] = useState(null);\n  const [image, setImage] = useState(null);\n  const [crop, setCrop] = useState({\n    aspect: 16 / 9\n  });\n  const [result, setResult] = useState(null);\n\n  const handleImage = async event => {\n    setSrcImg(URL.createObjectURL(event.target.files[0]));\n    console.log(event.target.files[0]);\n  };\n\n  const getCroppedImg = async () => {\n    try {\n      const canvas = document.createElement(\"canvas\");\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = crop.width;\n      canvas.height = crop.height;\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n      const base64Image = canvas.toDataURL(\"image/jpeg\", 1);\n      setResult(base64Image);\n      console.log(result);\n    } catch (e) {\n      console.log(\"crop the image\");\n    }\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(result);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"container\",\n    fluid: \"md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"header\",\n      children: \"React Image Crop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        controlId: \"formBasicEmail\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: \"Select Image you want to crop\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: handleImage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [srcImg && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n              style: {\n                maxWidth: \"50%\"\n              },\n              src: srcImg,\n              onImageLoaded: setImage,\n              crop: crop,\n              onChange: setCrop\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              className: \"cropButton\",\n              onClick: getCroppedImg,\n              children: \"crop\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 29\n          }, this), result && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result,\n              alt: \"cropped image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Crrp, \"YQYMNkez0NBIKf64s8gm54OAOiQ=\");\n\n_c = Crrp;\nexport default Crrp;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crrp\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/crrp.js"],"names":["Form","Button","Container","useState","ReactCrop","Crrp","srcImg","setSrcImg","image","setImage","crop","setCrop","aspect","result","setResult","handleImage","event","URL","createObjectURL","target","files","console","log","getCroppedImg","canvas","document","createElement","scaleX","naturalWidth","width","scaleY","naturalHeight","height","ctx","getContext","drawImage","x","y","base64Image","toDataURL","e","handleSubmit","preventDefault","maxWidth"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport {Form, Button, Container} from \"react-bootstrap\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {useState} from \"react\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport ReactCrop from \"react-image-crop\";\r\n\r\n\r\nfunction Crrp() {\r\n\r\n    const [srcImg, setSrcImg] = useState(null);\r\n    const [image, setImage] = useState(null);\r\n    const [crop, setCrop] = useState({aspect: 16 / 9});\r\n    const [result, setResult] = useState(null);\r\n\r\n    const handleImage = async (event) => {\r\n        setSrcImg(URL.createObjectURL(event.target.files[0]));\r\n        console.log(event.target.files[0]);\r\n    };\r\n\r\n    const getCroppedImg = async () => {\r\n        try {\r\n            const canvas = document.createElement(\"canvas\");\r\n            const scaleX = image.naturalWidth / image.width;\r\n            const scaleY = image.naturalHeight / image.height;\r\n            canvas.width = crop.width;\r\n            canvas.height = crop.height;\r\n            const ctx = canvas.getContext(\"2d\");\r\n            ctx.drawImage(\r\n                image,\r\n                crop.x * scaleX,\r\n                crop.y * scaleY,\r\n                crop.width * scaleX,\r\n                crop.height * scaleY,\r\n                0,\r\n                0,\r\n                crop.width,\r\n                crop.height\r\n            );\r\n\r\n            const base64Image = canvas.toDataURL(\"image/jpeg\", 1);\r\n            setResult(base64Image);\r\n            console.log(result);\r\n        } catch (e) {\r\n            console.log(\"crop the image\");\r\n        }\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(result);\r\n    }\r\n\r\n    return (\r\n        <Container className=\"container\" fluid=\"md\">\r\n            <h5 className=\"header\">React Image Crop</h5>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\r\n                    <Form.Label>Select Image you want to crop</Form.Label>\r\n                    <div>\r\n                        <input\r\n                            type=\"file\"\r\n                            accept=\"image/*\"\r\n                            onChange={handleImage}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        {srcImg && (\r\n                            <div>\r\n                                <ReactCrop\r\n                                    style={{maxWidth: \"50%\"}}\r\n                                    src={srcImg}\r\n                                    onImageLoaded={setImage}\r\n                                    crop={crop}\r\n                                    onChange={setCrop}\r\n                                />\r\n                                <Button className=\"cropButton\" onClick={getCroppedImg}\r\n                                >\r\n                                    crop\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                        {result && (\r\n                            <div>\r\n                                <img src={result} alt=\"cropped image\"/>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Crrp;"]},"metadata":{},"sourceType":"module"}