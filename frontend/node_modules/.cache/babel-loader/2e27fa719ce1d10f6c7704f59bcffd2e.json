{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Cropper\\\\Cropper.jsx\",\n    _s = $RefreshSig$();\n\nimport { Modal } from 'react-bootstrap';\nimport React, { useState, useRef } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Cropper(_ref) {\n  _s();\n\n  let {\n    imgSrc,\n    setImgSrc\n  } = _ref;\n  const [modalShow, setModaShow] = useState(false);\n  const [crop, setCrop] = useState();\n  const [completedCrop, setCompletedCrop] = useState();\n  const [aspect, setAspect] = useState(16 / 9);\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n\n  function onImageLoad(e) {\n    if (aspect) {\n      const {\n        width,\n        height\n      } = e.currentTarget; // setCrop(centerAspectCrop(width, height, aspect))\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Modal, {\n        show: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: [Boolean(imgSrc) && /*#__PURE__*/_jsxDEV(ReactCrop, {\n            crop: crop,\n            onChange: (_, percentCrop) => setCrop(percentCrop),\n            onComplete: c => setCompletedCrop(c),\n            aspect: aspect,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              ref: imgRef,\n              alt: \"Crop me\",\n              src: imgSrc // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\n              ,\n              onLoad: onImageLoad\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: Boolean(completedCrop) && /*#__PURE__*/_jsxDEV(\"canvas\", {\n              ref: previewCanvasRef,\n              style: {\n                border: '1px solid black',\n                objectFit: 'contain',\n                width: completedCrop.width,\n                height: completedCrop.height\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(Cropper, \"QFF5bBzVjC1nL92XGkbZ+yRM3Nc=\");\n\n_c = Cropper;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cropper\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Cropper/Cropper.jsx"],"names":["Modal","React","useState","useRef","ReactCrop","Cropper","imgSrc","setImgSrc","modalShow","setModaShow","crop","setCrop","completedCrop","setCompletedCrop","aspect","setAspect","imgRef","previewCanvasRef","onImageLoad","e","width","height","currentTarget","Boolean","_","percentCrop","c","border","objectFit"],"mappings":";;;AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAO,qCAAP;;;AAGA,eAAe,SAASC,OAAT,OAAwC;AAAA;;AAAA,MAAvB;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAuB;AAEnD,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BP,QAAQ,CAAC,KAAD,CAAzC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,EAAhC;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AACA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,KAAK,CAAN,CAApC;AACA,QAAMc,MAAM,GAAGb,MAAM,CAAC,IAAD,CAArB;AACA,QAAMc,gBAAgB,GAAGd,MAAM,CAAC,IAAD,CAA/B;;AAGA,WAASe,WAAT,CAAqBC,CAArB,EAAwB;AACpB,QAAIL,MAAJ,EAAY;AACR,YAAM;AAAEM,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAoBF,CAAC,CAACG,aAA5B,CADQ,CAER;AACH;AACJ;;AAED,sBACI;AAAA,2BACI;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAE,IAAb;AAAA,+BACI,QAAC,KAAD,CAAO,IAAP;AAAA,qBAEKC,OAAO,CAACjB,MAAD,CAAP,iBACG,QAAC,SAAD;AACI,YAAA,IAAI,EAAEI,IADV;AAEI,YAAA,QAAQ,EAAE,CAACc,CAAD,EAAIC,WAAJ,KAAoBd,OAAO,CAACc,WAAD,CAFzC;AAGI,YAAA,UAAU,EAAGC,CAAD,IAAOb,gBAAgB,CAACa,CAAD,CAHvC;AAII,YAAA,MAAM,EAAEZ,MAJZ;AAAA,mCAMI;AACI,cAAA,GAAG,EAAEE,MADT;AAEI,cAAA,GAAG,EAAC,SAFR;AAGI,cAAA,GAAG,EAAEV,MAHT,CAII;AAJJ;AAKI,cAAA,MAAM,EAAEY;AALZ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,kBAHR,eAkBI;AAAA,sBACKK,OAAO,CAACX,aAAD,CAAP,iBACG;AACI,cAAA,GAAG,EAAEK,gBADT;AAEI,cAAA,KAAK,EAAE;AACHU,gBAAAA,MAAM,EAAE,iBADL;AAEHC,gBAAAA,SAAS,EAAE,SAFR;AAGHR,gBAAAA,KAAK,EAAER,aAAa,CAACQ,KAHlB;AAIHC,gBAAAA,MAAM,EAAET,aAAa,CAACS;AAJnB;AAFX;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,kBAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAyCH;;GA1DuBhB,O;;KAAAA,O","sourcesContent":["import { Modal } from 'react-bootstrap'\r\nimport React, { useState, useRef } from 'react'\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\n\r\nexport default function Cropper({ imgSrc, setImgSrc }) {\r\n\r\n    const [modalShow, setModaShow] = useState(false)\r\n    const [crop, setCrop] = useState()\r\n    const [completedCrop, setCompletedCrop] = useState()\r\n    const [aspect, setAspect] = useState(16 / 9)\r\n    const imgRef = useRef(null)\r\n    const previewCanvasRef = useRef(null)\r\n\r\n\r\n    function onImageLoad(e) {\r\n        if (aspect) {\r\n            const { width, height } = e.currentTarget\r\n            // setCrop(centerAspectCrop(width, height, aspect))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Modal show={true} >\r\n                    <Modal.Body>\r\n\r\n                        {Boolean(imgSrc) && (\r\n                            <ReactCrop\r\n                                crop={crop}\r\n                                onChange={(_, percentCrop) => setCrop(percentCrop)}\r\n                                onComplete={(c) => setCompletedCrop(c)}\r\n                                aspect={aspect}\r\n                            >\r\n                                <img\r\n                                    ref={imgRef}\r\n                                    alt=\"Crop me\"\r\n                                    src={imgSrc}\r\n                                    // style={{ transform: `scale(${scale}) rotate(${rotate}deg)` }}\r\n                                    onLoad={onImageLoad}\r\n                                />\r\n                            </ReactCrop>\r\n                        )}\r\n                        <div>\r\n                            {Boolean(completedCrop) && (\r\n                                <canvas\r\n                                    ref={previewCanvasRef}\r\n                                    style={{\r\n                                        border: '1px solid black',\r\n                                        objectFit: 'contain',\r\n                                        width: completedCrop.width,\r\n                                        height: completedCrop.height,\r\n                                    }}\r\n                                />\r\n                            )}\r\n                        </div>\r\n\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}