{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAceInstance = exports.debounce = exports.editorEvents = exports.editorOptions = void 0;\nvar editorOptions = [\"minLines\", \"maxLines\", \"readOnly\", \"highlightActiveLine\", \"tabSize\", \"enableBasicAutocompletion\", \"enableLiveAutocompletion\", \"enableSnippets\"];\nexports.editorOptions = editorOptions;\nvar editorEvents = [\"onChange\", \"onFocus\", \"onInput\", \"onBlur\", \"onCopy\", \"onPaste\", \"onSelectionChange\", \"onCursorChange\", \"onScroll\", \"handleOptions\", \"updateRef\"];\nexports.editorEvents = editorEvents;\n\nvar getAceInstance = function () {\n  var ace;\n\n  if (typeof window === \"undefined\") {\n    // ace-builds just needs some window object to attach ace to.\n    // During SSR even just an empty object will work.\n    global.window = {};\n    ace = require(\"ace-builds\"); // And it can be discarded immediately afterward to avoid confusing\n    // other libraries that might detect SSR the same way we did.\n\n    delete global.window;\n  } else if (window.ace) {\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\n    ace = window.ace;\n    ace.acequire = window.ace.require || window.ace.acequire;\n  } else {\n    ace = require(\"ace-builds\");\n  }\n\n  return ace;\n};\n\nexports.getAceInstance = getAceInstance;\n\nvar debounce = function (fn, delay) {\n  var timer = null; // tslint:disable-next-line\n\n  return function () {\n    var context = this;\n    var args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n\nexports.debounce = debounce;","map":{"version":3,"mappings":";;;;;;AAYA,IAAMA,aAAa,GAAmB,CACpC,UADoC,EAEpC,UAFoC,EAGpC,UAHoC,EAIpC,qBAJoC,EAKpC,SALoC,EAMpC,2BANoC,EAOpC,0BAPoC,EAQpC,gBARoC,CAAtC;AA+ESC;AAvDT,IAAMC,YAAY,GAAkB,CAClC,UADkC,EAElC,SAFkC,EAGlC,SAHkC,EAIlC,QAJkC,EAKlC,QALkC,EAMlC,SANkC,EAOlC,mBAPkC,EAQlC,gBARkC,EASlC,UATkC,EAUlC,eAVkC,EAWlC,WAXkC,CAApC;AAuDwBD;;AAhCxB,IAAME,cAAc,GAAG;AACrB,MAAIC,GAAJ;;AACA,MAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACA;AACAC,UAAM,CAACD,MAAP,GAAgB,EAAhB;AACAD,OAAG,GAAGG,OAAO,CAAC,YAAD,CAAb,CAJiC,CAKjC;AACA;;AACA,WAAOD,MAAM,CAACD,MAAd;AACD,GARD,MAQO,IAAKA,MAAc,CAACD,GAApB,EAAyB;AAC9B;AACAA,OAAG,GAAIC,MAAc,CAACD,GAAtB;AACAA,OAAG,CAACI,QAAJ,GAAgBH,MAAc,CAACD,GAAf,CAAmBG,OAAnB,IAA+BF,MAAc,CAACD,GAAf,CAAmBI,QAAlE;AACD,GAJM,MAIA;AACLJ,OAAG,GAAGG,OAAO,CAAC,YAAD,CAAb;AACD;;AACD,SAAOH,GAAP;AACD,CAlBD;;AAgCgDH;;AAZhD,IAAMQ,QAAQ,GAAG,UAACC,EAAD,EAA+BC,KAA/B,EAA4C;AAC3D,MAAIC,KAAK,GAAQ,IAAjB,CAD2D,CAE3D;;AACA,SAAO;AACL,QAAMC,OAAO,GAAG,IAAhB;AACA,QAAMC,IAAI,GAAGC,SAAb;AACAC,gBAAY,CAACJ,KAAD,CAAZ;AACAA,SAAK,GAAGK,UAAU,CAAC;AACjBP,QAAE,CAACQ,KAAH,CAASL,OAAT,EAAkBC,IAAlB;AACD,KAFiB,EAEfH,KAFe,CAAlB;AAGD,GAPD;AAQD,CAXD;;AAYsCV","names":["editorOptions","exports","editorEvents","getAceInstance","ace","window","global","require","acequire","debounce","fn","delay","timer","context","args","arguments","clearTimeout","setTimeout","apply"],"sources":["D:\\Project 2\\frontend\\node_modules\\react-ace\\src\\editorOptions.ts"],"sourcesContent":["import * as AceBuilds from \"ace-builds\";\n\ntype EditorOption =\n  | \"minLines\"\n  | \"maxLines\"\n  | \"readOnly\"\n  | \"highlightActiveLine\"\n  | \"tabSize\"\n  | \"enableBasicAutocompletion\"\n  | \"enableLiveAutocompletion\"\n  | \"enableSnippets\";\n\nconst editorOptions: EditorOption[] = [\n  \"minLines\",\n  \"maxLines\",\n  \"readOnly\",\n  \"highlightActiveLine\",\n  \"tabSize\",\n  \"enableBasicAutocompletion\",\n  \"enableLiveAutocompletion\",\n  \"enableSnippets\"\n];\n\ntype EditorEvent =\n  | \"onChange\"\n  | \"onFocus\"\n  | \"onInput\"\n  | \"onBlur\"\n  | \"onCopy\"\n  | \"onPaste\"\n  | \"onSelectionChange\"\n  | \"onCursorChange\"\n  | \"onScroll\"\n  | \"handleOptions\"\n  | \"updateRef\";\n\nconst editorEvents: EditorEvent[] = [\n  \"onChange\",\n  \"onFocus\",\n  \"onInput\",\n  \"onBlur\",\n  \"onCopy\",\n  \"onPaste\",\n  \"onSelectionChange\",\n  \"onCursorChange\",\n  \"onScroll\",\n  \"handleOptions\",\n  \"updateRef\"\n];\n\n// Typescript globals definition to allow us to create a window object during SSR.\ndeclare global {\n  namespace NodeJS {\n    // tslint:disable-next-line\n    interface Global {\n      window: any;\n    }\n  }\n}\nconst getAceInstance = (): typeof AceBuilds => {\n  let ace;\n  if (typeof window === \"undefined\") {\n    // ace-builds just needs some window object to attach ace to.\n    // During SSR even just an empty object will work.\n    global.window = {};\n    ace = require(\"ace-builds\");\n    // And it can be discarded immediately afterward to avoid confusing\n    // other libraries that might detect SSR the same way we did.\n    delete global.window;\n  } else if ((window as any).ace) {\n    // Fallback for ace.require when vanilla ACE is hosted over a CDN\n    ace = (window as any).ace;\n    ace.acequire = (window as any).ace.require || (window as any).ace.acequire;\n  } else {\n    ace = require(\"ace-builds\");\n  }\n  return ace;\n};\n\nconst debounce = (fn: (...args: any[]) => void, delay: number) => {\n  let timer: any = null;\n  // tslint:disable-next-line\n  return function () {\n    const context = this;\n    const args = arguments;\n    clearTimeout(timer);\n    timer = setTimeout(() => {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\nexport { editorOptions, editorEvents, debounce, getAceInstance };\n"]},"metadata":{},"sourceType":"script"}