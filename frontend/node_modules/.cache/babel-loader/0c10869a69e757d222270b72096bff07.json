{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\Karthi Crop\\\\Crop.jsx\";\nimport React, { useState } from 'react';\nimport Box from '@mui/material/Box';\nimport Modal from '@mui/material/Modal';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport { Input } from '@mui/material';\nimport Button from '@mui/material/Button'; // const style = {\n//     position: 'absolute',\n//     top: '50%',\n//     left: '50%',\n//     transform: 'translate(-50%, -50%)',\n//     width: 700,\n//     bgcolor: 'background.paper',\n//     boxShadow: 30,\n//     pt: 4,\n//     px: 20,\n//     pb: 3,\n//   };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Crop(props) {\n  // const {result,setResult} = props ;\n  //   const [src,selectFile] = useState(null);\n  //   const [image , setImage] = useState(\"\");\n  //   const [crop, setCrop] = useState({ aspect: 1 / 1 })\n  //   const handleFileChange = e => {\n  //       e.preventDefault();\n  //       selectFile(URL.createObjectURL(e.target.files[0]))\n  //   }\n  //   const [open, setOpen] = useState(false);\n  //   const handleOpen = () => {\n  //     setOpen(true);\n  //   };\n  //   const handleClose = () => {\n  //     selectFile(null)\n  //     setImage(\"\")\n  //     setCrop({ aspect: 1 / 1})\n  //     setOpen(false);\n  //   };\n  function getCroppedImg() {\n    // const canvas = document.createElement(\"canvas\");\n    // const scaleX = image.naturalWidth / image.width;\n    // const scaleY = image.naturalHeight / image.height;\n    // canvas.width = crop.width;\n    // canvas.height = crop.height;\n    // const ctx = canvas.getContext(\"2d\");\n    // New lines to be added\n    // const pixelRatio = window.devicePixelRatio;\n    // canvas.width = crop.width * pixelRatio;\n    // canvas.height = crop.height * pixelRatio;\n    // ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    // ctx.imageSmoothingQuality = \"high\";\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width, crop.height);\n    const base64Image = canvas.toDataURL(\"image/jpeg\");\n    setResult(base64Image);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        onClick: handleOpen,\n        children: /*#__PURE__*/_jsxDEV(\"ion-icon\", {\n          name: \"add-circle-outline\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 26\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 2\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        open: open,\n        onClose: handleClose,\n        \"aria-labelledby\": \"parent-modal-title\",\n        \"aria-describedby\": \"parent-modal-description\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: { ...style,\n            width: 800\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            type: \"file\",\n            placeholder: \"image\",\n            onChange: handleFileChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this), result && result ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-lg-12\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result,\n              alt: \"croped-version\",\n              className: \"image-fluid\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 32\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: src && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-lg-12\",\n              children: [/*#__PURE__*/_jsxDEV(ReactCrop, {\n                src: src,\n                onImageLoaded: setImage,\n                crop: crop,\n                onChange: setCrop\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn-primary btn\",\n                onClick: getCroppedImg,\n                children: \"Crop Image\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleClose,\n            children: \"Close Child Modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Crop;\nexport default Crop;\n\nvar _c;\n\n$RefreshReg$(_c, \"Crop\");","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/Karthi Crop/Crop.jsx"],"names":["React","useState","Box","Modal","ReactCrop","Input","Button","Crop","props","getCroppedImg","ctx","drawImage","image","crop","x","scaleX","y","scaleY","width","height","base64Image","canvas","toDataURL","setResult","handleOpen","open","handleClose","style","handleFileChange","result","src","setImage","setCrop"],"mappings":"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","sourcesContent":["import  React,{useState} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Modal from '@mui/material/Modal';\r\nimport ReactCrop from 'react-image-crop'\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\nimport { Input } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\n\r\n\r\n\r\n// const style = {\r\n//     position: 'absolute',\r\n//     top: '50%',\r\n//     left: '50%',\r\n//     transform: 'translate(-50%, -50%)',\r\n//     width: 700,\r\n//     bgcolor: 'background.paper',\r\n//     boxShadow: 30,\r\n//     pt: 4,\r\n//     px: 20,\r\n//     pb: 3,\r\n//   };\r\n  \r\n\r\n\r\nfunction Crop(props) {\r\n  // const {result,setResult} = props ;\r\n\r\n  //   const [src,selectFile] = useState(null);\r\n  //   const [image , setImage] = useState(\"\");\r\n  //   const [crop, setCrop] = useState({ aspect: 1 / 1 })\r\n\r\n  //   const handleFileChange = e => {\r\n  //       e.preventDefault();\r\n  //       selectFile(URL.createObjectURL(e.target.files[0]))\r\n  //   }\r\n\r\n  //   const [open, setOpen] = useState(false);\r\n  //   const handleOpen = () => {\r\n  //     setOpen(true);\r\n  //   };\r\n  //   const handleClose = () => {\r\n  //     selectFile(null)\r\n  //     setImage(\"\")\r\n  //     setCrop({ aspect: 1 / 1})\r\n  //     setOpen(false);\r\n  //   };\r\n    \r\n    function getCroppedImg() {\r\n      // const canvas = document.createElement(\"canvas\");\r\n      // const scaleX = image.naturalWidth / image.width;\r\n      // const scaleY = image.naturalHeight / image.height;\r\n      // canvas.width = crop.width;\r\n      // canvas.height = crop.height;\r\n      // const ctx = canvas.getContext(\"2d\");\r\n    \r\n      // New lines to be added\r\n      // const pixelRatio = window.devicePixelRatio;\r\n      // canvas.width = crop.width * pixelRatio;\r\n      // canvas.height = crop.height * pixelRatio;\r\n      // ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\r\n      // ctx.imageSmoothingQuality = \"high\";\r\n    \r\n      ctx.drawImage(\r\n        image,\r\n        crop.x * scaleX,\r\n        crop.y * scaleY,\r\n        crop.width * scaleX,\r\n        crop.height * scaleY,\r\n        0,\r\n        0,\r\n        crop.width,\r\n        crop.height\r\n      );\r\n\r\n      const base64Image = canvas.toDataURL(\"image/jpeg\");\r\n      setResult(base64Image)\r\n    }\r\n\r\n  return (\r\n    <div>\r\n <div>\r\n <p onClick={handleOpen}><ion-icon name=\"add-circle-outline\"></ion-icon></p>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"parent-modal-title\"\r\n        aria-describedby=\"parent-modal-description\"\r\n      >\r\n        <Box sx={{ ...style, width: 800 }}>\r\n          <Input type='file' placeholder='image' onChange={handleFileChange}/>\r\n\r\n\r\n         \r\n\r\n          {result && result ? (<div className=\"col-lg-12\">\r\n            <img src={result} alt=\"croped-version\" className='image-fluid' />\r\n            </div>) :\r\n            ( <div>{src && \r\n              <div className=\"col-lg-12\">\r\n                <ReactCrop src={src} onImageLoaded={setImage} crop={crop} onChange={setCrop} />\r\n                <button className=\"btn-primary btn\" onClick={getCroppedImg}>Crop Image</button>\r\n                </div>\r\n              }</div>)\r\n             }\r\n             <Button onClick={handleClose}>Close Child Modal</Button>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Crop"]},"metadata":{},"sourceType":"module"}