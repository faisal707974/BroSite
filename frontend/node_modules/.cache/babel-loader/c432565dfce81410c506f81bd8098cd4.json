{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project 2\\\\frontend\\\\src\\\\components\\\\profilePhoto\\\\profilePhoto.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport './profilePhoto.css';\nimport Cropper from '../Cropper/Cropper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function (_ref) {\n  let {\n    imgSrc,\n    setImgSrc,\n    setCroppedPhoto\n  } = _ref;\n  const [cropper, setCropper] = useState(false);\n  const [result, setResult] = useState();\n  const [photoErr, setPhotoErr] = useState();\n\n  const photoUpload = e => {\n    e.preventDefault();\n    const reader = new FileReader();\n    reader.addEventListener('load', () => setImgSrc(reader.result.toString() || ''));\n    reader.readAsDataURL(e.target.files[0]);\n    {\n      e.target.files[0] && setCropper(true);\n    }\n    setPhotoErr();\n    console.log(e.target.files[0]);\n    const data = new FormData();\n    data.append(\"file\", e.target.files[0]);\n    data.append(\"upload_preset\", \"notezipper\");\n    data.append(\"cloud_name\", \"dvum0ialt\");\n    fetch(\"https://api.cloudinary.com/v1_1/dvum0ialt/image/upload\", {\n      method: \"post\",\n      body: data\n    }).then(res => res.json()).then(data => {\n      // setPic(data.url.toString());\n      console.log(data);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    setCroppedPhoto(result);\n  }, [result]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"PhotoUpload\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"PhotoUpload-Inner\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"photo\",\n          className: \"fas\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"img-upload\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: result,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            onChange: photoUpload,\n            name: 'photo',\n            className: \"photo\",\n            id: \"photo\",\n            required: true,\n            onInvalid: () => {\n              setPhotoErr('Upload your photo');\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), photoErr && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"photoErr\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: photoErr\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), cropper && /*#__PURE__*/_jsxDEV(Cropper, {\n      imgSrc: imgSrc,\n      setResult: setResult\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true);\n}","map":{"version":3,"sources":["D:/Project 2/frontend/src/components/profilePhoto/profilePhoto.jsx"],"names":["React","useEffect","useState","Cropper","imgSrc","setImgSrc","setCroppedPhoto","cropper","setCropper","result","setResult","photoErr","setPhotoErr","photoUpload","e","preventDefault","reader","FileReader","addEventListener","toString","readAsDataURL","target","files","console","log","data","FormData","append","fetch","method","body","then","res","json","catch","err"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './profilePhoto.css'\r\nimport Cropper from '../Cropper/Cropper';\r\n\r\n\r\nexport default function ({ imgSrc, setImgSrc, setCroppedPhoto }) {\r\n\r\n    const [cropper, setCropper] = useState(false)\r\n    const [result, setResult] = useState()\r\n    const [photoErr, setPhotoErr] = useState()\r\n\r\n    const photoUpload = e => {\r\n        e.preventDefault();\r\n        const reader = new FileReader()\r\n        reader.addEventListener('load', () =>\r\n            setImgSrc(reader.result.toString() || ''),\r\n        )\r\n        reader.readAsDataURL(e.target.files[0])\r\n        { e.target.files[0] && setCropper(true) }\r\n        setPhotoErr()\r\n        console.log(e.target.files[0])\r\n\r\n        const data = new FormData();\r\n        data.append(\"file\", e.target.files[0]);\r\n        data.append(\"upload_preset\", \"notezipper\");\r\n        data.append(\"cloud_name\", \"dvum0ialt\");\r\n        fetch(\"https://api.cloudinary.com/v1_1/dvum0ialt/image/upload\", {\r\n            method: \"post\",\r\n            body: data,\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n                // setPic(data.url.toString());\r\n                console.log(data)\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCroppedPhoto(result)\r\n    }, [result])\r\n\r\n    return (\r\n        <>\r\n            <div className='PhotoUpload'>\r\n                <div className='PhotoUpload-Inner'>\r\n                    <label htmlFor=\"photo\" className='fas' >\r\n                        <div className='img-upload'>\r\n                            <img src={result} alt=\"\" />\r\n                        </div>\r\n                        <input type=\"file\" accept='image/*' onChange={photoUpload} name={'photo'} className=\"photo\" id=\"photo\" required onInvalid={() => { setPhotoErr('Upload your photo') }} />\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            {photoErr &&\r\n                <div className='photoErr'>\r\n                    <p>{photoErr}</p>\r\n                </div>\r\n            }\r\n            {cropper && <Cropper imgSrc={imgSrc} setResult={setResult} />}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}